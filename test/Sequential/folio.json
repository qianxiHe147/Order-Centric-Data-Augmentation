[
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. People in this club who perform in school talent shows often attend and are very engaged with school events.\n2. People in this club either perform in school talent shows often or are inactive and disinterested community members.\n3. People in this club who chaperone high school dances are not students who attend the school.\n4. All people in this club who are inactive and disinterested members of their community chaperone high school dances.\n5. All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \n6. Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\nPremises-FOL:\n1. ∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))\n2. ∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))\n3. ∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Studen(x) ∧ AttendSchool(x)))\n4. ∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDances))\n5. ∀x (InThisClub(x) ∧ (YoungChildren(x) ⊕ Teenager(x)) ∧ WishToFurther(x, academicCareer)) → Studen(x) ∧ AttendSchool(x))\n6. InThisClub(bonnie) ∧ ¬((Attend(x, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Studen(bonne) ∧ AttendSchool(bonnie)))\nConclusion:\nBonnie performs in school talent shows often.\nConclusion-FOL:\nInThisClub(bonnie) ∧ (Perform(bonnie, schoolTalentShow))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. People in this club who perform in school talent shows often attend and are very engaged with school events.\n2. People in this club either perform in school talent shows often or are inactive and disinterested community members.\n3. People in this club who chaperone high school dances are not students who attend the school.\n4. All people in this club who are inactive and disinterested members of their community chaperone high school dances.\n5. All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \n6. Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\nPremises-FOL:\n1. ∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))\n2. ∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))\n3. ∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Studen(x) ∧ AttendSchool(x)))\n4. ∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDances))\n5. ∀x (InThisClub(x) ∧ (YoungChildren(x) ⊕ Teenager(x)) ∧ WishToFurther(x, academicCareer)) → Studen(x) ∧ AttendSchool(x))\n6. InThisClub(bonnie) ∧ ¬((Attend(x, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Studen(bonne) ∧ AttendSchool(bonnie)))\nConclusion:\nIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nConclusion-FOL:\n¬((YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer)) ⊕ Chaperone(bonnie, highSchoolDance)) → (Studen(x) ∧ AttendSchool(x)) ⊕ (YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. People in this club who perform in school talent shows often attend and are very engaged with school events.\n2. People in this club either perform in school talent shows often or are inactive and disinterested community members.\n3. People in this club who chaperone high school dances are not students who attend the school.\n4. All people in this club who are inactive and disinterested members of their community chaperone high school dances.\n5. All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \n6. Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\nPremises-FOL:\n1. ∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))\n2. ∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))\n3. ∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Studen(x) ∧ AttendSchool(x)))\n4. ∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDances))\n5. ∀x (InThisClub(x) ∧ (YoungChildren(x) ⊕ Teenager(x)) ∧ WishToFurther(x, academicCareer)) → Studen(x) ∧ AttendSchool(x))\n6. InThisClub(bonnie) ∧ ¬((Attend(x, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Studen(bonne) ∧ AttendSchool(bonnie)))\nConclusion:\nIf Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\nConclusion-FOL:\n(Chaperone(bonnie, highSchoolDance) ⊕ Perform(bonnie, schoolTalentShow)) → (YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer)) ∧ (InActive(bonnie) ∧ Disinterested(bonnie) ∧ MemberOf(bonnie, community))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All employees who schedule a meeting with their customers will go to the company building today. \n2. Everyone who has lunch in the company building schedules meetings with their customers. \n3. Employees have lunch either in the company building or at home.\n4. If an employee has lunch at home, they are working remotely from home.\n5. All employees who are in other countries work remotely from home. \n6. No managers work remotely from home. \n7. James will appear in the company today if and only if he is a manager.\nPremises-FOL:\n1. ∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))\n2. ∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))\n3. ∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))\n4. ∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))\n5. ∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))\n6. ∀x (Manager(x) → ¬Work(x, home))\n7. ¬(Manager(james) ⊕ AppearIn(james, company))\nConclusion:\nJames has lunch in the company.\nConclusion-FOL:\nHasLunch(james, company)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All employees who schedule a meeting with their customers will go to the company building today. \n2. Everyone who has lunch in the company building schedules meetings with their customers. \n3. Employees have lunch either in the company building or at home.\n4. If an employee has lunch at home, they are working remotely from home.\n5. All employees who are in other countries work remotely from home. \n6. No managers work remotely from home. \n7. James will appear in the company today if and only if he is a manager.\nPremises-FOL:\n1. ∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))\n2. ∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))\n3. ∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))\n4. ∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))\n5. ∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))\n6. ∀x (Manager(x) → ¬Work(x, home))\n7. ¬(Manager(james) ⊕ AppearIn(james, company))\nConclusion:\nJames does not have lunch in the company.\nConclusion-FOL:\n¬HasLunch(james, company)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All employees who schedule a meeting with their customers will go to the company building today. \n2. Everyone who has lunch in the company building schedules meetings with their customers. \n3. Employees have lunch either in the company building or at home.\n4. If an employee has lunch at home, they are working remotely from home.\n5. All employees who are in other countries work remotely from home. \n6. No managers work remotely from home. \n7. James will appear in the company today if and only if he is a manager.\nPremises-FOL:\n1. ∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))\n2. ∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))\n3. ∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))\n4. ∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))\n5. ∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))\n6. ∀x (Manager(x) → ¬Work(x, home))\n7. ¬(Manager(james) ⊕ AppearIn(james, company))\nConclusion:\nIf James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]\nConclusion-FOL:\nManager(james) → ¬Work(james, home)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. When the Monkeypox virus occurs in a being, it may get Monkeypox. \n2. Monkeypox virus can occur in certain animals.\n3. Humans are mammals.\n4. Mammals are animals.\n5. Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \n6. People feel tired when they get the flu.\nPremises-FOL:\n1. ∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))\n2. ∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))\n3. ∀x (Human(x) → Mammal(x))\n4. ∀x (Mammal(x) → Animal(x))\n5. ∃x (SymptonOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))\n6. ∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))\nConclusion:\nThere is an animal.\nConclusion-FOL:\n∃x (Animal(x))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. When the Monkeypox virus occurs in a being, it may get Monkeypox. \n2. Monkeypox virus can occur in certain animals.\n3. Humans are mammals.\n4. Mammals are animals.\n5. Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \n6. People feel tired when they get the flu.\nPremises-FOL:\n1. ∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))\n2. ∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))\n3. ∀x (Human(x) → Mammal(x))\n4. ∀x (Mammal(x) → Animal(x))\n5. ∃x (SymptonOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))\n6. ∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))\nConclusion:\nNo one gets the flu.\nConclusion-FOL:\n∀x (Human(x) → ¬Get(x, flu))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. When the Monkeypox virus occurs in a being, it may get Monkeypox. \n2. Monkeypox virus can occur in certain animals.\n3. Humans are mammals.\n4. Mammals are animals.\n5. Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \n6. People feel tired when they get the flu.\nPremises-FOL:\n1. ∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))\n2. ∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))\n3. ∀x (Human(x) → Mammal(x))\n4. ∀x (Mammal(x) → Animal(x))\n5. ∃x (SymptonOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))\n6. ∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))\nConclusion:\nSymptoms of Monkeypox include coughing.\nConclusion-FOL:\n∃x (SymptonOf(x, monkeypoxVirus) ∧ Coughing(x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n2. Tom is not an Eastern wild turkey.\n3. Tom is not an Osceola wild turkey.\n4. Tom is not a Gould's wild turkey.\n5. Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\n6. Tom is a wild turkey.\nPremises-FOL:\n1. ∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))\n2. ¬(EasternWildTurkey(tom))\n3. ¬(OsceolaWildTurkey(tom))\n4. ¬(GouldsWildTurkey(tom))\n5. ¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))\n6. WildTurkey(tom)\nConclusion:\nTom is an Ocellated wild turkey.\nConclusion-FOL:\nOcellatedWildTurkey(tom)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n2. Tom is not an Eastern wild turkey.\n3. Tom is not an Osceola wild turkey.\n4. Tom is not a Gould's wild turkey.\n5. Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\n6. Tom is a wild turkey.\nPremises-FOL:\n1. ∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))\n2. ¬(EasternWildTurkey(tom))\n3. ¬(OsceolaWildTurkey(tom))\n4. ¬(GouldsWildTurkey(tom))\n5. ¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))\n6. WildTurkey(tom)\nConclusion:\nTom is an Eastern wild turkey.\nConclusion-FOL:\nEasternWildTurkey(tom)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n2. Tom is not an Eastern wild turkey.\n3. Tom is not an Osceola wild turkey.\n4. Tom is not a Gould's wild turkey.\n5. Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\n6. Tom is a wild turkey.\nPremises-FOL:\n1. ∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))\n2. ¬(EasternWildTurkey(tom))\n3. ¬(OsceolaWildTurkey(tom))\n4. ¬(GouldsWildTurkey(tom))\n5. ¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))\n6. WildTurkey(tom)\nConclusion:\nJoey is a wild turkey.\nConclusion-FOL:\nWildTurkey(joey)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. A Japanese game company created the game the Legend of Zelda.\n2. All games on the Top 10 list are made by Japanese game companies.\n3. If a game sells more than one million copies, then it will be included in the Top 10 list.\n4. The Legend of Zelda sold more than one million copies.\nPremises-FOL:\n1. Game(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))\n2. ∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))\n3. ∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x)))\n4. ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))\nConclusion:\nThe Legend of Zelda is on the Top 10 list.\nConclusion-FOL:\nTop10(thelegendofzelda)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. A Japanese game company created the game the Legend of Zelda.\n2. All games on the Top 10 list are made by Japanese game companies.\n3. If a game sells more than one million copies, then it will be included in the Top 10 list.\n4. The Legend of Zelda sold more than one million copies.\nPremises-FOL:\n1. Game(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))\n2. ∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))\n3. ∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x)))\n4. ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))\nConclusion:\nFIFA 22 is made by a Japanese video game company.\nConclusion-FOL:\n∃x(Created(x, fifa22) ∧ Japanese(x) ∧ VideoGameCompany(x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. A Japanese game company created the game the Legend of Zelda.\n2. All games on the Top 10 list are made by Japanese game companies.\n3. If a game sells more than one million copies, then it will be included in the Top 10 list.\n4. The Legend of Zelda sold more than one million copies.\nPremises-FOL:\n1. Game(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))\n2. ∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))\n3. ∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x)))\n4. ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))\nConclusion:\nThe Legend of Zelda is not on the Top 10 list.\nConclusion-FOL:\n¬Top10(thelegendofzelda)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All squares are four-sided.\n2. All four-sided things are shapes. \nPremises-FOL:\n1. ∀x (Square(x) → FourSided(x))\n2. ∀x (FourSided(x) → Shape(x))\nConclusion:\nAll squares are shapes.\nConclusion-FOL:\n∀x (Square(x) → Shape(x))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All rabbits that can be spotted near the campus are cute. \n2. Some turtles can be spotted near the campus. \n3. The only animals that can be spotted near the campus are rabbits and squirrels.\n4. If something is skittish, then it is not calm.\n5. All the squirrels that can be spotted near the campus are skittish.\n6. Rockie can be spotted near the campus, and it is calm.\nPremises-FOL:\n1. ∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n2. ∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n3. ∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n4. ∀x (Skittish(x) → ¬Calm(x))\n5. ∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\n6. CanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \nConclusion:\nRockie is a turtle.\nConclusion-FOL:\nTurtle(rockie)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All rabbits that can be spotted near the campus are cute. \n2. Some turtles can be spotted near the campus. \n3. The only animals that can be spotted near the campus are rabbits and squirrels.\n4. If something is skittish, then it is not calm.\n5. All the squirrels that can be spotted near the campus are skittish.\n6. Rockie can be spotted near the campus, and it is calm.\nPremises-FOL:\n1. ∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n2. ∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n3. ∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n4. ∀x (Skittish(x) → ¬Calm(x))\n5. ∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\n6. CanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \nConclusion:\nRockie is not a turtle.\nConclusion-FOL:\n¬Turtle(rockie)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All rabbits that can be spotted near the campus are cute. \n2. Some turtles can be spotted near the campus. \n3. The only animals that can be spotted near the campus are rabbits and squirrels.\n4. If something is skittish, then it is not calm.\n5. All the squirrels that can be spotted near the campus are skittish.\n6. Rockie can be spotted near the campus, and it is calm.\nPremises-FOL:\n1. ∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n2. ∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n3. ∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n4. ∀x (Skittish(x) → ¬Calm(x))\n5. ∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\n6. CanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \nConclusion:\nRockie is a turtle or cute.\nConclusion-FOL:\nTurtle(rockie) ∨ Cute(rockie)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All rabbits that can be spotted near the campus are cute. \n2. Some turtles can be spotted near the campus. \n3. The only animals that can be spotted near the campus are rabbits and squirrels.\n4. If something is skittish, then it is not calm.\n5. All the squirrels that can be spotted near the campus are skittish.\n6. Rockie can be spotted near the campus, and it is calm.\nPremises-FOL:\n1. ∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n2. ∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n3. ∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n4. ∀x (Skittish(x) → ¬Calm(x))\n5. ∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\n6. CanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \nConclusion:\nIf Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.\nConclusion-FOL:\n¬(Turtle(rockie) ∧ Squirrel(rockie)) → Cute(rockie) ⊕ Skittish(rockie)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All rabbits that can be spotted near the campus are cute. \n2. Some turtles can be spotted near the campus. \n3. The only animals that can be spotted near the campus are rabbits and squirrels.\n4. If something is skittish, then it is not calm.\n5. All the squirrels that can be spotted near the campus are skittish.\n6. Rockie can be spotted near the campus, and it is calm.\nPremises-FOL:\n1. ∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n2. ∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n3. ∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n4. ∀x (Skittish(x) → ¬Calm(x))\n5. ∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\n6. CanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \nConclusion:\nIf Rockie is cute and calm, then Rockie is a skittish turtle.\nConclusion-FOL:\nCute(rockie) ∧ Calm(rockie) → Turtle(rockie) ∧ Skittish(rockie)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. \"Stranger Things\" is a popular Netflix show.\n2. If a Netflix show is popular, Karen will binge-watch it.\n3. If and only if Karen binge-watches a Netflix show, she will download it.\n4. Karen does not download \"Black Mirror.\"\n5. \"Black Mirror\" is a Netflix show.\n6. If Karen binge-watches a Netflix show, she will share it with Lisa.\nPremises-FOL:\n1. NetflixShow(strangerThings) ∧ Popular(strangerThings)\n2. ∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))\n3. ∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))\n4. ¬Download(karen, blackMirror)\n5. NetflixShow(blackMirror)\n6. ∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))\nConclusion:\nKaren will share \"Stranger Things\" with Lisa.\nConclusion-FOL:\nShareWith(karen, strangerThings, lisa)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. \"Stranger Things\" is a popular Netflix show.\n2. If a Netflix show is popular, Karen will binge-watch it.\n3. If and only if Karen binge-watches a Netflix show, she will download it.\n4. Karen does not download \"Black Mirror.\"\n5. \"Black Mirror\" is a Netflix show.\n6. If Karen binge-watches a Netflix show, she will share it with Lisa.\nPremises-FOL:\n1. NetflixShow(strangerThings) ∧ Popular(strangerThings)\n2. ∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))\n3. ∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))\n4. ¬Download(karen, blackMirror)\n5. NetflixShow(blackMirror)\n6. ∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))\nConclusion:\n\"Black Mirror\" is popular.\nConclusion-FOL:\nPopular(blackMirror)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. \"Stranger Things\" is a popular Netflix show.\n2. If a Netflix show is popular, Karen will binge-watch it.\n3. If and only if Karen binge-watches a Netflix show, she will download it.\n4. Karen does not download \"Black Mirror.\"\n5. \"Black Mirror\" is a Netflix show.\n6. If Karen binge-watches a Netflix show, she will share it with Lisa.\nPremises-FOL:\n1. NetflixShow(strangerThings) ∧ Popular(strangerThings)\n2. ∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))\n3. ∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))\n4. ¬Download(karen, blackMirror)\n5. NetflixShow(blackMirror)\n6. ∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))\nConclusion:\nKaren will share \"Black Mirror\" with Lisa.\nConclusion-FOL:\nShareWith(karen, blackMirror, lisa)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Beijing is the capital of the People's Republic of China. \n2. Beijing is the capital city of the world's most populous nation.\n3. Beijing is located in Northern China.\n4. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n5. Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\n6. Many of Beijing's 91 universities consistently rank among the best universities in the world.\nPremises-FOL:\n1. CapitalOf(beijing, peoplesRepublicOfChina)\n2. ∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))\n3. LocatedIn(beijing, northernChina)\n4. Hosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)\n5. Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames)  ∧ Hosted(beijing, winterParalympicGames)\n6. ∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))\nConclusion:\nBeijing hosted both the 2008 Summer Olympics and the Winter Olympics.\nConclusion-FOL:\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Beijing is the capital of the People's Republic of China. \n2. Beijing is the capital city of the world's most populous nation.\n3. Beijing is located in Northern China.\n4. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n5. Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\n6. Many of Beijing's 91 universities consistently rank among the best universities in the world.\nPremises-FOL:\n1. CapitalOf(beijing, peoplesRepublicOfChina)\n2. ∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))\n3. LocatedIn(beijing, northernChina)\n4. Hosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)\n5. Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames)  ∧ Hosted(beijing, winterParalympicGames)\n6. ∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))\nConclusion:\nBeijing is located in southern China.\nConclusion-FOL:\nLocatedIn(beijing, southernChina)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Beijing is the capital of the People's Republic of China. \n2. Beijing is the capital city of the world's most populous nation.\n3. Beijing is located in Northern China.\n4. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n5. Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\n6. Many of Beijing's 91 universities consistently rank among the best universities in the world.\nPremises-FOL:\n1. CapitalOf(beijing, peoplesRepublicOfChina)\n2. ∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))\n3. LocatedIn(beijing, northernChina)\n4. Hosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)\n5. Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames)  ∧ Hosted(beijing, winterParalympicGames)\n6. ∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))\nConclusion:\nBeijing is the second largest Chinese city.\nConclusion-FOL:\nSecondLargestChineseCity(beijing)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All aliens are extraterrestrials.\n2. If someone is from Mars, then they are an alien.\n3. No extraterrestrials are human.\n4. All highly intelligent beings from Earth are humans.\n5. Marvin is a highly intelligent being.\n6. Marvin is either from Earth and from Mars, or he is from neither.\n7. If Marvin is not from Earth, then Marvin is an extraterrestrial.\nPremises-FOL:\n1. ∀x (Alien(x) → Extraterrestrial(x))\n2. ∀x (From(x, mars) → Alien(x))\n3. ∀x (Extraterrestrial(x) → ¬Human(x))\n4. ∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))\n5. HighlyIntelligentBeing(marvin)\n6. ¬(From(marvin, earth) ⊕ From(marvin, mars))\n7. ¬From(marvin, earth) → Extraterrestrial(marvin)\nConclusion:\nMarvin is an alien.\nConclusion-FOL:\nAlien(marvin)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All aliens are extraterrestrials.\n2. If someone is from Mars, then they are an alien.\n3. No extraterrestrials are human.\n4. All highly intelligent beings from Earth are humans.\n5. Marvin is a highly intelligent being.\n6. Marvin is either from Earth and from Mars, or he is from neither.\n7. If Marvin is not from Earth, then Marvin is an extraterrestrial.\nPremises-FOL:\n1. ∀x (Alien(x) → Extraterrestrial(x))\n2. ∀x (From(x, mars) → Alien(x))\n3. ∀x (Extraterrestrial(x) → ¬Human(x))\n4. ∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))\n5. HighlyIntelligentBeing(marvin)\n6. ¬(From(marvin, earth) ⊕ From(marvin, mars))\n7. ¬From(marvin, earth) → Extraterrestrial(marvin)\nConclusion:\nMarvin is neither a human nor from Mars.\nConclusion-FOL:\n¬Human(marvin) ∧ ¬From(marvin, mars)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All aliens are extraterrestrials.\n2. If someone is from Mars, then they are an alien.\n3. No extraterrestrials are human.\n4. All highly intelligent beings from Earth are humans.\n5. Marvin is a highly intelligent being.\n6. Marvin is either from Earth and from Mars, or he is from neither.\n7. If Marvin is not from Earth, then Marvin is an extraterrestrial.\nPremises-FOL:\n1. ∀x (Alien(x) → Extraterrestrial(x))\n2. ∀x (From(x, mars) → Alien(x))\n3. ∀x (Extraterrestrial(x) → ¬Human(x))\n4. ∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))\n5. HighlyIntelligentBeing(marvin)\n6. ¬(From(marvin, earth) ⊕ From(marvin, mars))\n7. ¬From(marvin, earth) → Extraterrestrial(marvin)\nConclusion:\nIf Marvin is not from Mars, then Marvin is a human.\nConclusion-FOL:\n¬From(marvin, mars) → Human(marvin)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\n2. Every Grand Slam champion at the mixer is a professional tennis player.\n3. All Oscar-nominated actors at the mixer are celebrities.\n4. All professional tennis players at the mixer are athletes.\n5. If a person at the mixer is a celebrity, then they are well paid.\n6. If a person at the mixer is an athlete, then they are famous.\n7. All well-paid people at the mixer live in tax havens.\n8. Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\nPremises-FOL:\n1. ∀x (At(x, mixer) → (GrandSlam(x) ∧ Champion(x)) ∨ (OscarNominated(x) ∧ Actor(x)))\n2. ∀x (At(x, mixer) ∧ (GrandSlam(x) ∧ Champion(x) → Professional(x) ∧ TennisPlayer(x))\n3. ∀x (At(x, mixer) ∧ (OscarNominated(x) ∧ Actor(x) → Celebrity(x))\n4. ∀x (At(x, mixer) ∧ Professional(x) ∧ TennisPlayer(x) → Athlete(x))\n5. ∀x (At(x, mixer) ∧ Celebrity(x) → WellPaid(x))\n6. ∀x (At(x, mixer) ∧ Athlete(x) → Famous(x))\n7. ∀x (At(x, mixer) ∧ WellPaid(x) → LiveIn(x, taxHaven))\n8. At(djokovic, mixer) ∧ (Famous(djokovic) ∧ Athlete(djokovic) → WellPaid(djokovic))\nConclusion:\nDjokovic is a Grand Slam champion.\nConclusion-FOL:\nGrandSlam(djokovic) ∧ Champion(djokovic)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\n2. Every Grand Slam champion at the mixer is a professional tennis player.\n3. All Oscar-nominated actors at the mixer are celebrities.\n4. All professional tennis players at the mixer are athletes.\n5. If a person at the mixer is a celebrity, then they are well paid.\n6. If a person at the mixer is an athlete, then they are famous.\n7. All well-paid people at the mixer live in tax havens.\n8. Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\nPremises-FOL:\n1. ∀x (At(x, mixer) → (GrandSlam(x) ∧ Champion(x)) ∨ (OscarNominated(x) ∧ Actor(x)))\n2. ∀x (At(x, mixer) ∧ (GrandSlam(x) ∧ Champion(x) → Professional(x) ∧ TennisPlayer(x))\n3. ∀x (At(x, mixer) ∧ (OscarNominated(x) ∧ Actor(x) → Celebrity(x))\n4. ∀x (At(x, mixer) ∧ Professional(x) ∧ TennisPlayer(x) → Athlete(x))\n5. ∀x (At(x, mixer) ∧ Celebrity(x) → WellPaid(x))\n6. ∀x (At(x, mixer) ∧ Athlete(x) → Famous(x))\n7. ∀x (At(x, mixer) ∧ WellPaid(x) → LiveIn(x, taxHaven))\n8. At(djokovic, mixer) ∧ (Famous(djokovic) ∧ Athlete(djokovic) → WellPaid(djokovic))\nConclusion:\nDjokovic lives in a tax haven.\nConclusion-FOL:\nLiveIn(djokovic, taxHaven)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\n2. Every Grand Slam champion at the mixer is a professional tennis player.\n3. All Oscar-nominated actors at the mixer are celebrities.\n4. All professional tennis players at the mixer are athletes.\n5. If a person at the mixer is a celebrity, then they are well paid.\n6. If a person at the mixer is an athlete, then they are famous.\n7. All well-paid people at the mixer live in tax havens.\n8. Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\nPremises-FOL:\n1. ∀x (At(x, mixer) → (GrandSlam(x) ∧ Champion(x)) ∨ (OscarNominated(x) ∧ Actor(x)))\n2. ∀x (At(x, mixer) ∧ (GrandSlam(x) ∧ Champion(x) → Professional(x) ∧ TennisPlayer(x))\n3. ∀x (At(x, mixer) ∧ (OscarNominated(x) ∧ Actor(x) → Celebrity(x))\n4. ∀x (At(x, mixer) ∧ Professional(x) ∧ TennisPlayer(x) → Athlete(x))\n5. ∀x (At(x, mixer) ∧ Celebrity(x) → WellPaid(x))\n6. ∀x (At(x, mixer) ∧ Athlete(x) → Famous(x))\n7. ∀x (At(x, mixer) ∧ WellPaid(x) → LiveIn(x, taxHaven))\n8. At(djokovic, mixer) ∧ (Famous(djokovic) ∧ Athlete(djokovic) → WellPaid(djokovic))\nConclusion:\nDjokovic does not live in a tax haven.\nConclusion-FOL:\n¬LiveIn(djokovic, taxHaven)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Diamond Mine is a professional wrestling stable formed in WWE.\n2. Roderick Strong leads Diamond Mine.\n3. Diamond Mine includes the Creed Brothers and Ivy Nile.\n4. Imperium has a feud with Diamond Mine.\nPremises-FOL:\n1. ProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)\n2. Leads(roderickStrong, diamondMine)\n3. Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)\n4. Feuds(imperium, diamondMine)\nConclusion:\nRoderick Strong leads a professional wrestling stable.\nConclusion-FOL:\n∃x (Leads(roderickstrong, x) ∧ ProfessionalWrestlingStable(x))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Diamond Mine is a professional wrestling stable formed in WWE.\n2. Roderick Strong leads Diamond Mine.\n3. Diamond Mine includes the Creed Brothers and Ivy Nile.\n4. Imperium has a feud with Diamond Mine.\nPremises-FOL:\n1. ProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)\n2. Leads(roderickStrong, diamondMine)\n3. Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)\n4. Feuds(imperium, diamondMine)\nConclusion:\nRoderick Strong leads the Creed Brothers.\nConclusion-FOL:\nLeads(roderickstrong, creedbrothers)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Diamond Mine is a professional wrestling stable formed in WWE.\n2. Roderick Strong leads Diamond Mine.\n3. Diamond Mine includes the Creed Brothers and Ivy Nile.\n4. Imperium has a feud with Diamond Mine.\nPremises-FOL:\n1. ProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)\n2. Leads(roderickStrong, diamondMine)\n3. Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)\n4. Feuds(imperium, diamondMine)\nConclusion:\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nConclusion-FOL:\n∀x ((ProfessionalWrestlingStable(x) ∧ Includes(x, ivynile)) → ¬Feuds(imperium, x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Symphony No. 9 is a music piece.\n2. Composers write music pieces.\n3. Beethoven wrote Symphony No. 9.\n4. Vienna Music Society premiered Symphony No. 9.\n5. Vienna Music Society is an orchestra.\n6. Beethoven leads the Vienna Music Society.\n7. Orchestras are led by conductors.\nPremises-FOL:\n1. MusicPiece(symphony9)\n2. ∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))\n3. Writtenby(symphony9, beethoven)\n4. Premiered(viennaMusicSociety, symphony9)\n5. Orchestra(viennaMusicSociety)\n6. Lead(beethoven, viennaMusicSociety)\n7. ∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))\nConclusion:\nBeethoven is a composer.\nConclusion-FOL:\nComposer(beethoven)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Symphony No. 9 is a music piece.\n2. Composers write music pieces.\n3. Beethoven wrote Symphony No. 9.\n4. Vienna Music Society premiered Symphony No. 9.\n5. Vienna Music Society is an orchestra.\n6. Beethoven leads the Vienna Music Society.\n7. Orchestras are led by conductors.\nPremises-FOL:\n1. MusicPiece(symphony9)\n2. ∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))\n3. Writtenby(symphony9, beethoven)\n4. Premiered(viennaMusicSociety, symphony9)\n5. Orchestra(viennaMusicSociety)\n6. Lead(beethoven, viennaMusicSociety)\n7. ∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))\nConclusion:\nSome orchestras premiered music pieces.\nConclusion-FOL:\n∃x ∃y (Orchestra(x) ∧ MusicPiece(y) ∧ Premiered(x, y))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Symphony No. 9 is a music piece.\n2. Composers write music pieces.\n3. Beethoven wrote Symphony No. 9.\n4. Vienna Music Society premiered Symphony No. 9.\n5. Vienna Music Society is an orchestra.\n6. Beethoven leads the Vienna Music Society.\n7. Orchestras are led by conductors.\nPremises-FOL:\n1. MusicPiece(symphony9)\n2. ∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))\n3. Writtenby(symphony9, beethoven)\n4. Premiered(viennaMusicSociety, symphony9)\n5. Orchestra(viennaMusicSociety)\n6. Lead(beethoven, viennaMusicSociety)\n7. ∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))\nConclusion:\nBeethoven is not a conductor.\nConclusion-FOL:\n¬Conductor(beethoven)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All of Zaha Hadid's design styles that Max adores have interesting geometries.\n2. No brutalist buildings that Max adores have interesting geometries.\n3. Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \n4. All of Kelly Wearstler's design styles that Max adores are evocative.\n5. All of Kelly Wearstler's design styles that Max adores are dreamy.\n6. If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\nPremises-FOL:\n1. ∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))\n2. ∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))\n3. ∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x)))\n4. ∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))\n5. ∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))\n6. ∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))\nConclusion:\nA design by Max is a brutalist building.\nConclusion-FOL:\n∃x (Design(x) ∧ ByMax(x) ∧ BrutalistBuilding(x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All of Zaha Hadid's design styles that Max adores have interesting geometries.\n2. No brutalist buildings that Max adores have interesting geometries.\n3. Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \n4. All of Kelly Wearstler's design styles that Max adores are evocative.\n5. All of Kelly Wearstler's design styles that Max adores are dreamy.\n6. If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\nPremises-FOL:\n1. ∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))\n2. ∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))\n3. ∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x)))\n4. ∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))\n5. ∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))\n6. ∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))\nConclusion:\nA design by Max is evocative and dreamy.\nConclusion-FOL:\n∃x (Design(x) ∧ ByMax(x) ∧ Evocative(x) ∧ Dreamy(x))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All of Zaha Hadid's design styles that Max adores have interesting geometries.\n2. No brutalist buildings that Max adores have interesting geometries.\n3. Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \n4. All of Kelly Wearstler's design styles that Max adores are evocative.\n5. All of Kelly Wearstler's design styles that Max adores are dreamy.\n6. If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\nPremises-FOL:\n1. ∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))\n2. ∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))\n3. ∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x)))\n4. ∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))\n5. ∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))\n6. ∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))\nConclusion:\nA design by Max is either evocative or dreamy.\nConclusion-FOL:\n∃x (Design(x) ∧ ByMax(x) ∧ (Evocative(x) ⊕ Dreamy(x)))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \n2. Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\n3. All female tennis players at Roland Garros 2022 lost to Iga Świątek.\n4. All tennis players at Roland Garros 2022 are either female or male.\n5. All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\n6. If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n7. Coco Gauff is at Roland Garros 2022.\nPremises-FOL:\n1. ∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))\n2. ∀x (LostTo(x, świątek) ∧  At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))\n3. ∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧  At(x, rolandGarros2022))\n4. ∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ∧ TennisPlayer(x)) ⊕ (Male(x) ∧ TennisPlayer(x))) \n5. ∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧ At(x, rolandGarros2022))\n6. RankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ (LostTo(cocoGauff, świątek) ∧ LostAt(cocoGauff, rolandGarros2022)) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))\n7. TennisPlayer(cocoGauff) ∧ At(cocoGauff, rolandGarros2022)\nConclusion:\nCoco Gauff is among the most active Grand-Slam players.\nConclusion-FOL:\nMostActivePlayerIn(cocoGauff, majorTennis)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \n2. Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\n3. All female tennis players at Roland Garros 2022 lost to Iga Świątek.\n4. All tennis players at Roland Garros 2022 are either female or male.\n5. All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\n6. If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n7. Coco Gauff is at Roland Garros 2022.\nPremises-FOL:\n1. ∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))\n2. ∀x (LostTo(x, świątek) ∧  At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))\n3. ∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧  At(x, rolandGarros2022))\n4. ∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ∧ TennisPlayer(x)) ⊕ (Male(x) ∧ TennisPlayer(x))) \n5. ∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧ At(x, rolandGarros2022))\n6. RankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ (LostTo(cocoGauff, świątek) ∧ LostAt(cocoGauff, rolandGarros2022)) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))\n7. TennisPlayer(cocoGauff) ∧ At(cocoGauff, rolandGarros2022)\nConclusion:\nCoco Gauff has lost to Rafael Nadal.\nConclusion-FOL:\nLostTo(cocoGauff, świątek) ∧ At(cocoGauff, rolandGarros2022)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \n2. Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\n3. All female tennis players at Roland Garros 2022 lost to Iga Świątek.\n4. All tennis players at Roland Garros 2022 are either female or male.\n5. All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\n6. If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n7. Coco Gauff is at Roland Garros 2022.\nPremises-FOL:\n1. ∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))\n2. ∀x (LostTo(x, świątek) ∧  At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))\n3. ∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧  At(x, rolandGarros2022))\n4. ∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ∧ TennisPlayer(x)) ⊕ (Male(x) ∧ TennisPlayer(x))) \n5. ∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧ At(x, rolandGarros2022))\n6. RankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ (LostTo(cocoGauff, świątek) ∧ LostAt(cocoGauff, rolandGarros2022)) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))\n7. TennisPlayer(cocoGauff) ∧ At(cocoGauff, rolandGarros2022)\nConclusion:\nCoco Gauff is not both a player who lost to Iga Świątek at Roland Garros 2022 and one of the most active players in major tennis.\nConclusion-FOL:\n¬(LostTo(cocoGauff, świątek) ∧ At(cocoGauff, rolandGarros2022)) ∨ ¬MostActivePlayerIn(cocoGauff, majorTennis)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All cats are mammals.\n2. Some pets are not mammals.\nPremises-FOL:\n1. ∀x (Cat(x) → Mammal(x))\n2. ∃x (Pet(x) ∧ ¬Mammal(x))\nConclusion:\nNo pets are cats.\nConclusion-FOL:\n∀x (Pet(x) → ¬Cat(x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. There are four seasons in a year: Spring, Summer, Fall, and Winter.\n2. All students who want to have a long vacation have summer as their favorite season.\n3. Emma's favorite season is summer.\n4. Mia's favorite season is not the same as Emma's. \n5. James wants to have a long vacation.\nPremises-FOL:\n1. Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter) ∧ (Season(spring) → ¬Season(summer) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(summer) → ¬Season(spring) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(fall) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(winter)) ∧ (Season(winter) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(fall))\n2. ∀x (Want(x, longvacation) → Favorite(x, summer))\n3. Favorite(emma, summer)\n4. ∀x ∀y (Season(x) ∧ Season(y) ∧ Favorite(mia, x) ∧ Favorite(emma, y) → ¬(x=y))\n5. Want(james, longVacation)\nConclusion:\nJames's favorite season is summer.\nConclusion-FOL:\nFavorite(james, summer)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. There are four seasons in a year: Spring, Summer, Fall, and Winter.\n2. All students who want to have a long vacation have summer as their favorite season.\n3. Emma's favorite season is summer.\n4. Mia's favorite season is not the same as Emma's. \n5. James wants to have a long vacation.\nPremises-FOL:\n1. Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter) ∧ (Season(spring) → ¬Season(summer) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(summer) → ¬Season(spring) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(fall) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(winter)) ∧ (Season(winter) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(fall))\n2. ∀x (Want(x, longvacation) → Favorite(x, summer))\n3. Favorite(emma, summer)\n4. ∀x ∀y (Season(x) ∧ Season(y) ∧ Favorite(mia, x) ∧ Favorite(emma, y) → ¬(x=y))\n5. Want(james, longVacation)\nConclusion:\nMia's favorite season is spring.\nConclusion-FOL:\nFavorite(mia, spring)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No digital media are analog.\n2. Every printed text is analog media.\n3. All streaming services are digital media.\n4. If an object is a hardcover book, then it is printed text.\n5. If 1984 is a streaming service, then 1984 is a hardcover book.\nPremises-FOL:\n1. ∀x (DigitalMedia(x) → ¬AnalogMedia(x))\n2. ∀x (PrintedText(x) → AnalogMedia(x))\n3. ∀x (StreamingService(x) → DigitalMedia(x))\n4. ∀x (HardcoverBook(x) → PrintedText(x))\n5. StreamingService(1984) → HardcoverBook(1984)\nConclusion:\n1984 is printed text.\nConclusion-FOL:\nPrintedText(y1984)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No digital media are analog.\n2. Every printed text is analog media.\n3. All streaming services are digital media.\n4. If an object is a hardcover book, then it is printed text.\n5. If 1984 is a streaming service, then 1984 is a hardcover book.\nPremises-FOL:\n1. ∀x (DigitalMedia(x) → ¬AnalogMedia(x))\n2. ∀x (PrintedText(x) → AnalogMedia(x))\n3. ∀x (StreamingService(x) → DigitalMedia(x))\n4. ∀x (HardcoverBook(x) → PrintedText(x))\n5. StreamingService(1984) → HardcoverBook(1984)\nConclusion:\n1984 is a streaming service.\nConclusion-FOL:\nStreamingService(y1984)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No digital media are analog.\n2. Every printed text is analog media.\n3. All streaming services are digital media.\n4. If an object is a hardcover book, then it is printed text.\n5. If 1984 is a streaming service, then 1984 is a hardcover book.\nPremises-FOL:\n1. ∀x (DigitalMedia(x) → ¬AnalogMedia(x))\n2. ∀x (PrintedText(x) → AnalogMedia(x))\n3. ∀x (StreamingService(x) → DigitalMedia(x))\n4. ∀x (HardcoverBook(x) → PrintedText(x))\n5. StreamingService(1984) → HardcoverBook(1984)\nConclusion:\n1984 is not a streaming service.\nConclusion-FOL:\n¬StreamingService(y1984)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All Romance languages are Indo-European languages.\n2. Romance languages are a language family.\n3. All languages within a language family are related to each other.\n4. French and Spanish are both Romance languages.\n5. German is related to Spanish.\n6. Basque is not related to any other language.\nPremises-FOL:\n1. ∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\n2. ∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))\n3. ∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))\n4. RomanceLanguage(french) ∧ RomanceLanguage(spanish)\n5. Related(german, spanish)\n6. ∀x (Language(x) → ¬Related(basque, x))\nConclusion:\nBasque is a Romance language.\nConclusion-FOL:\nRomanceLanguage(basque)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All Romance languages are Indo-European languages.\n2. Romance languages are a language family.\n3. All languages within a language family are related to each other.\n4. French and Spanish are both Romance languages.\n5. German is related to Spanish.\n6. Basque is not related to any other language.\nPremises-FOL:\n1. ∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\n2. ∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))\n3. ∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))\n4. RomanceLanguage(french) ∧ RomanceLanguage(spanish)\n5. Related(german, spanish)\n6. ∀x (Language(x) → ¬Related(basque, x))\nConclusion:\nGerman is a Romance language.\nConclusion-FOL:\nRomanceLanguage(german)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All Romance languages are Indo-European languages.\n2. Romance languages are a language family.\n3. All languages within a language family are related to each other.\n4. French and Spanish are both Romance languages.\n5. German is related to Spanish.\n6. Basque is not related to any other language.\nPremises-FOL:\n1. ∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\n2. ∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))\n3. ∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))\n4. RomanceLanguage(french) ∧ RomanceLanguage(spanish)\n5. Related(german, spanish)\n6. ∀x (Language(x) → ¬Related(basque, x))\nConclusion:\nFrench is an Indo-European language.\nConclusion-FOL:\nIndoEuropeanLanguage(french)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Robert Lewandowski is a striker.\n2. Strikers are soccer players.\n3. Robert Lewandowski left Bayern Munchen.\n4. If a player leaves a team they no longer play for that team.\nPremises-FOL:\n1. Striker(robertLewandowski)\n2. ∀x (Striker(x) → SoccerPlayer(x))\n3. Left(robertLewandowski, bayernMunchen)\n4. ∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))\nConclusion:\nRobert Lewandowski is a soccer player.\nConclusion-FOL:\nSoccerPlayer(robertLewandowski)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Robert Lewandowski is a striker.\n2. Strikers are soccer players.\n3. Robert Lewandowski left Bayern Munchen.\n4. If a player leaves a team they no longer play for that team.\nPremises-FOL:\n1. Striker(robertLewandowski)\n2. ∀x (Striker(x) → SoccerPlayer(x))\n3. Left(robertLewandowski, bayernMunchen)\n4. ∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))\nConclusion:\nRobert Lewandowski plays for Bayern Munchen.\nConclusion-FOL:\nPlaysFor(robertLewandowski, bayernMunchen)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Robert Lewandowski is a striker.\n2. Strikers are soccer players.\n3. Robert Lewandowski left Bayern Munchen.\n4. If a player leaves a team they no longer play for that team.\nPremises-FOL:\n1. Striker(robertLewandowski)\n2. ∀x (Striker(x) → SoccerPlayer(x))\n3. Left(robertLewandowski, bayernMunchen)\n4. ∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))\nConclusion:\nRobert Lewandowski is a star.\nConclusion-FOL:\nSoccerStar(robertLewandowski)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Billings is a city in the state of Montana in U.S.\n2. The state of Montana includes the cities of Butte, Helena, and Missoula.\n3. White Sulphur Springs and Butte are cities in the same state in U.S.\n4. The city of St Pierre is not in the state of Montana.\n5. Any city in Butte is not in St Pierre.\n6. A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\nPremises-FOL:\n1. City(billings) ∧ In(billings, montana)\n2. City(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)\n3. ∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))\n4. City(pierre) ∧ ¬(In(pierre, montana))\n5. ∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))\n6. ∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity)) → ¬∃z (¬(z=y) ∧ In(x, z)))\nConclusion:\nButte and St Pierre are in the same state.\nConclusion-FOL:\n∃x (In(butte, x) ∧ In(stPierre, x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Billings is a city in the state of Montana in U.S.\n2. The state of Montana includes the cities of Butte, Helena, and Missoula.\n3. White Sulphur Springs and Butte are cities in the same state in U.S.\n4. The city of St Pierre is not in the state of Montana.\n5. Any city in Butte is not in St Pierre.\n6. A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\nPremises-FOL:\n1. City(billings) ∧ In(billings, montana)\n2. City(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)\n3. ∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))\n4. City(pierre) ∧ ¬(In(pierre, montana))\n5. ∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))\n6. ∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity)) → ¬∃z (¬(z=y) ∧ In(x, z)))\nConclusion:\nSt Pierre and Bismarck are in the same state.\nConclusion-FOL:\n∃x (City(pierre) ∧ In(pierre, x) ∧ City(bismarck) ∧ In(bismarck, x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Billings is a city in the state of Montana in U.S.\n2. The state of Montana includes the cities of Butte, Helena, and Missoula.\n3. White Sulphur Springs and Butte are cities in the same state in U.S.\n4. The city of St Pierre is not in the state of Montana.\n5. Any city in Butte is not in St Pierre.\n6. A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\nPremises-FOL:\n1. City(billings) ∧ In(billings, montana)\n2. City(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)\n3. ∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))\n4. City(pierre) ∧ ¬(In(pierre, montana))\n5. ∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))\n6. ∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity)) → ¬∃z (¬(z=y) ∧ In(x, z)))\nConclusion:\nMontana is home to the city of Missoula.\nConclusion-FOL:\nCity(missoula) ∧ In(missoula, montana)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. International students in the US have either an F1 visa or a J1 visa.\n2. An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n3. Mike is an international student.\n4. Mike needs to apply for CPT if he wants to work in the US.\nPremises-FOL:\n1. ∀x (InternationalStudent(x) ∧ In(x, unitedStates) → F1Visa(x) ⊕ J1Visa(x))\n2. ∀x (InternationalStudent(x) ∧ In(x, unitedStates) ∧ F1Visa(x) ∧ WantToWorkIn(x, unitedStates) → Apply(x, cpt) ∨ Apply(x, opt))\n3. InternationalStudent(mike)\n4. WantToWorkIn(x, unitedStates) → Apply(mike, cpt)\nConclusion:\nMike has an F1 visa.\nConclusion-FOL:\nF1Visa(mike)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. International students in the US have either an F1 visa or a J1 visa.\n2. An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n3. Mike is an international student.\n4. Mike needs to apply for CPT if he wants to work in the US.\nPremises-FOL:\n1. ∀x (InternationalStudent(x) ∧ In(x, unitedStates) → F1Visa(x) ⊕ J1Visa(x))\n2. ∀x (InternationalStudent(x) ∧ In(x, unitedStates) ∧ F1Visa(x) ∧ WantToWorkIn(x, unitedStates) → Apply(x, cpt) ∨ Apply(x, opt))\n3. InternationalStudent(mike)\n4. WantToWorkIn(x, unitedStates) → Apply(mike, cpt)\nConclusion:\nMike has a J1 visa.\nConclusion-FOL:\nJ1Visa(mike)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All Brown Swiss cattle are cows.\n2. Some pets are Brown Swiss Cattle.\n3. All cows are domesticated animals.\n4. Alligators are not domesticated animals.\n5. Ted is an alligator.\nPremises-FOL:\n1. ∀x (BrownSwissCattle(x) → Cow(x))\n2. ∃x (Pet(x) ∧ BrownSwissCattle(x))\n3. ∀x (Cow(x) → DomesticatedAnimal(x))\n4. ∀x (Aligator(x) → ¬DomesticatedAnimal(x))\n5. Aligator(ted)\nConclusion:\nTed is a pet.\nConclusion-FOL:\nPet(ted)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All Brown Swiss cattle are cows.\n2. Some pets are Brown Swiss Cattle.\n3. All cows are domesticated animals.\n4. Alligators are not domesticated animals.\n5. Ted is an alligator.\nPremises-FOL:\n1. ∀x (BrownSwissCattle(x) → Cow(x))\n2. ∃x (Pet(x) ∧ BrownSwissCattle(x))\n3. ∀x (Cow(x) → DomesticatedAnimal(x))\n4. ∀x (Aligator(x) → ¬DomesticatedAnimal(x))\n5. Aligator(ted)\nConclusion:\nTed is a pet and Brown Swiss cattle\nConclusion-FOL:\nPet(ted) ∧ BrownSwissCattle(ted)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All Brown Swiss cattle are cows.\n2. Some pets are Brown Swiss Cattle.\n3. All cows are domesticated animals.\n4. Alligators are not domesticated animals.\n5. Ted is an alligator.\nPremises-FOL:\n1. ∀x (BrownSwissCattle(x) → Cow(x))\n2. ∃x (Pet(x) ∧ BrownSwissCattle(x))\n3. ∀x (Cow(x) → DomesticatedAnimal(x))\n4. ∀x (Aligator(x) → ¬DomesticatedAnimal(x))\n5. Aligator(ted)\nConclusion:\nIf Ted is a Brown Swiss cattle, then Ted is not a pet.\nConclusion-FOL:\nBrownSwissCattle(ted) → ¬Pet(ted)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Yale University is a private Ivy League research university.\n2. Yale University moved to New Haven in 1716.\n3. Yale university's endowment was valued at $42.3 billion.\n4. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nPremises-FOL:\n1. PrivateIvyLeagueResearchUniversity(yaleUniversity)\n2. MovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)\n3. ValuedAt(yaleUniversitysEndowment, 42point3billion)\n4. ∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))\nConclusion:\nA private Ivy League research university moved to New Haven.\nConclusion-FOL:\n∃x (PrivateIvyLeagueResearchUniversity(x) ∧ MovedTo(x, newHaven))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Yale University is a private Ivy League research university.\n2. Yale University moved to New Haven in 1716.\n3. Yale university's endowment was valued at $42.3 billion.\n4. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nPremises-FOL:\n1. PrivateIvyLeagueResearchUniversity(yaleUniversity)\n2. MovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)\n3. ValuedAt(yaleUniversitysEndowment, 42point3billion)\n4. ∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))\nConclusion:\nYale University has the largest university endowment of any educational institution.\nConclusion-FOL:\nLargestUniversityEndowmentOf(yale, anyEducationalInstitution)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Yale University is a private Ivy League research university.\n2. Yale University moved to New Haven in 1716.\n3. Yale university's endowment was valued at $42.3 billion.\n4. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nPremises-FOL:\n1. PrivateIvyLeagueResearchUniversity(yaleUniversity)\n2. MovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)\n3. ValuedAt(yaleUniversitysEndowment, 42point3billion)\n4. ∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))\nConclusion:\nPierson College is a residential college at Yale.\nConclusion-FOL:\nResidentialCollege(piersonCollege) ∧ At(piersonCollege, yale)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Badults is a British Sitcom series starring members of Pappy's.\n2. Badults was piloted in July 2013 on BBC Three.\n3. The Working title \"The Secret Dude Society\" was used for Badults.\n4. Andrew Collins was the script editor for Badults.\nPremises-FOL:\n1. ∃x (BritishSitcom(badults) ∧ Series(badults) ∧ MemberOf(x, pappys) ∧ Starring(badults, x))\n2. PilotedIn(badults, july2013) ∧ PilotedOn(badults, bBCThree)\n3. WorkingTitle(theSecretDudeSociety, badults) ∧ UsedFor(theSecretDudeSociety, badults)\n4. ScriptEditorFor(andrewCollins, badults)\nConclusion:\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nConclusion-FOL:\n∃x (ScriptEditorFor(andrewCollins, x) ∧ Series(x) ∧ WorkingTitle(theSecretDudeSociety, x))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Badults is a British Sitcom series starring members of Pappy's.\n2. Badults was piloted in July 2013 on BBC Three.\n3. The Working title \"The Secret Dude Society\" was used for Badults.\n4. Andrew Collins was the script editor for Badults.\nPremises-FOL:\n1. ∃x (BritishSitcom(badults) ∧ Series(badults) ∧ MemberOf(x, pappys) ∧ Starring(badults, x))\n2. PilotedIn(badults, july2013) ∧ PilotedOn(badults, bBCThree)\n3. WorkingTitle(theSecretDudeSociety, badults) ∧ UsedFor(theSecretDudeSociety, badults)\n4. ScriptEditorFor(andrewCollins, badults)\nConclusion:\nNo members of Pappy's have starred in a show piloting on BBC Two or BBC Three.\nConclusion-FOL:\n∀x ∀y (MemberOf(x, pappys) ∧ Starring(y, x) → ¬(PilotedOn(y, bBCTwo) ∨ PilotedOn(y, bBCThree)))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All growth stocks are bought to earn profits from rapid price appreciation.\n2. If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\n3. Some stocks are growth stocks.\n4. All mature stocks are suitable for a retirement fund.\n5. KO is a mature stock.\nPremises-FOL:\n1. ∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))\n2. ∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund)) \n3. ∃x (Stock(x) ∧ GrowthStock(x))\n4. ∀x (MatureStock(x) → SuitableFor(x, retirementFund))\n5. MatureStock(kO)\nConclusion:\nKO is a stock.\nConclusion-FOL:\nStock(kO)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All growth stocks are bought to earn profits from rapid price appreciation.\n2. If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\n3. Some stocks are growth stocks.\n4. All mature stocks are suitable for a retirement fund.\n5. KO is a mature stock.\nPremises-FOL:\n1. ∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))\n2. ∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund)) \n3. ∃x (Stock(x) ∧ GrowthStock(x))\n4. ∀x (MatureStock(x) → SuitableFor(x, retirementFund))\n5. MatureStock(kO)\nConclusion:\nKO is a stock and a growth stock.\nConclusion-FOL:\n¬GrowthStock(kO)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All growth stocks are bought to earn profits from rapid price appreciation.\n2. If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\n3. Some stocks are growth stocks.\n4. All mature stocks are suitable for a retirement fund.\n5. KO is a mature stock.\nPremises-FOL:\n1. ∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))\n2. ∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund)) \n3. ∃x (Stock(x) ∧ GrowthStock(x))\n4. ∀x (MatureStock(x) → SuitableFor(x, retirementFund))\n5. MatureStock(kO)\nConclusion:\nIf KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.\nConclusion-FOL:\nGrowthStock(kO) ∨ BoughtToEarnProfitFrom(kO, earnProfit, rapidPriceAppreciation) → ¬Stock(kO) ∧ ¬BoughtToEarnProfitFrom(kO, rapidPriceAppreciation)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All vehicle registration plates in Istanbul begin with the number 34.\n2. Plates that do not begin with the number 34 are not from Istanbul. \n3. Joe's vehicle registration plate is from Istanbul. \n4. Tom's license plate begins with the number 35. \n5. If a license plate begins with the number 35, then it does not begin with the number 34.\nPremises-FOL:\n1. ∀x (VehicleRegistrationPlateIn(x, istanbul) → BeginWith(x, num34))\n2. ∀x (¬BeginWith(x, num34) → ¬FromIstanbul(x))\n3. ∃x (Owns(joe, x) ∧ VehicleRegistrationPlateIn(x, istanbul))\n4. ∃x (Owns(tom, x) ∧ BeginWith(x, num35))\n5. ∀x (BeginWith(x, num35) → ¬BeginWith(x, num34))\nConclusion:\nJoe's license plate begins with the number 34.\nConclusion-FOL:\n∃x (Owns(joe, x) ∧ BeginWith(x, num34))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All vehicle registration plates in Istanbul begin with the number 34.\n2. Plates that do not begin with the number 34 are not from Istanbul. \n3. Joe's vehicle registration plate is from Istanbul. \n4. Tom's license plate begins with the number 35. \n5. If a license plate begins with the number 35, then it does not begin with the number 34.\nPremises-FOL:\n1. ∀x (VehicleRegistrationPlateIn(x, istanbul) → BeginWith(x, num34))\n2. ∀x (¬BeginWith(x, num34) → ¬FromIstanbul(x))\n3. ∃x (Owns(joe, x) ∧ VehicleRegistrationPlateIn(x, istanbul))\n4. ∃x (Owns(tom, x) ∧ BeginWith(x, num35))\n5. ∀x (BeginWith(x, num35) → ¬BeginWith(x, num34))\nConclusion:\nTom's license plate is from Istanbul.\nConclusion-FOL:\n∃x (Owns(tom, x) ∧ VehicleRegistrationPlateIn(x, istanbul))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n2. If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\n3. People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\n4. If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\n5. If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n6. Hannah is at Mary's school.\n7. Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\nPremises-FOL:\n1. ∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))\n2. ∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))\n3. ∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))\n4. ∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))\n5. ∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))\n6. At(hannah, marysSchool)\n7. (WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))\nConclusion:\nHannah needs to earn money to help pay for her college tuition.\nConclusion-FOL:\nNeedToEarnMoneyToHelpPayFor(hannah, collegeTuition)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n2. If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\n3. People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\n4. If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\n5. If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n6. Hannah is at Mary's school.\n7. Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\nPremises-FOL:\n1. ∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))\n2. ∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))\n3. ∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))\n4. ∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))\n5. ∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))\n6. At(hannah, marysSchool)\n7. (WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))\nConclusion:\nHannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nConclusion-FOL:\n¬(PickyEater(hannah) ∧ Spend(hannah, aLotOfTime, eating) ∧ Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n2. If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\n3. People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\n4. If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\n5. If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n6. Hannah is at Mary's school.\n7. Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\nPremises-FOL:\n1. ∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))\n2. ∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))\n3. ∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))\n4. ∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))\n5. ∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))\n6. At(hannah, marysSchool)\n7. (WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))\nConclusion:\nHannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nConclusion-FOL:\nPickyEater(hannah) ⊕ (Spend(hannah, aLotOfTime, eating) ∧ Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No baked sweets are spicy.\n2. All cupcakes are baked sweets.\n3. All mala hotpots are spicy.\n4. All products from Baked by Melissa are cupcakes.\n5. Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nPremises-FOL:\n1. ∀x (BakedSweet(x) → ¬Spicy(x))\n2. ∀x (Cupcake(x) → BakedSweet(x))\n3. ∀x (MalaHotpot(x) → Spicy(x))\n4. ∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\n5. Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\nConclusion:\nDried Thai chilies are products of Baked by Melissa.\nConclusion-FOL:\nProduct(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No baked sweets are spicy.\n2. All cupcakes are baked sweets.\n3. All mala hotpots are spicy.\n4. All products from Baked by Melissa are cupcakes.\n5. Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nPremises-FOL:\n1. ∀x (BakedSweet(x) → ¬Spicy(x))\n2. ∀x (Cupcake(x) → BakedSweet(x))\n3. ∀x (MalaHotpot(x) → Spicy(x))\n4. ∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\n5. Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\nConclusion:\nDried Thai chilies are not products of Baked by Melissa.\nConclusion-FOL:\n¬(Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No baked sweets are spicy.\n2. All cupcakes are baked sweets.\n3. All mala hotpots are spicy.\n4. All products from Baked by Melissa are cupcakes.\n5. Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nPremises-FOL:\n1. ∀x (BakedSweet(x) → ¬Spicy(x))\n2. ∀x (Cupcake(x) → BakedSweet(x))\n3. ∀x (MalaHotpot(x) → Spicy(x))\n4. ∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\n5. Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\nConclusion:\nDried Thai chilies are a mala hotpot.\nConclusion-FOL:\nMalaHotpot(driedThaiChili)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No baked sweets are spicy.\n2. All cupcakes are baked sweets.\n3. All mala hotpots are spicy.\n4. All products from Baked by Melissa are cupcakes.\n5. Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nPremises-FOL:\n1. ∀x (BakedSweet(x) → ¬Spicy(x))\n2. ∀x (Cupcake(x) → BakedSweet(x))\n3. ∀x (MalaHotpot(x) → Spicy(x))\n4. ∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\n5. Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\nConclusion:\nDried Thai chilies are neither products of Baked by Melissa nor baked sweets.\nConclusion-FOL:\n¬(Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)) ∧ ¬BakedSweet(driedThaiChili)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No baked sweets are spicy.\n2. All cupcakes are baked sweets.\n3. All mala hotpots are spicy.\n4. All products from Baked by Melissa are cupcakes.\n5. Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nPremises-FOL:\n1. ∀x (BakedSweet(x) → ¬Spicy(x))\n2. ∀x (Cupcake(x) → BakedSweet(x))\n3. ∀x (MalaHotpot(x) → Spicy(x))\n4. ∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\n5. Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\nConclusion:\nDried Thai chilies are cupcakes and products of Baked by Melissa.\nConclusion-FOL:\nCupcake(driedThaiChili) ∧ Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.\n2. All restaurants with a rating greater than four are listed in Yelp’s recommendations.\n3. Some restaurants that do not provide take-out service receive many negative reviews.\n4. All restaurants that are popular among local residents have ratings greater than four.\n5. The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\nPremises-FOL:\n1. ∀x ∃y (ListedIn(x, yelpRecommendation) → NegativeReview(y) ∧ ¬Receive(x, y))\n2. ∀x ∀y (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))\n3. ∃x ∃y (¬Provide(x, takeOutService) → NegativeReview(y) ∧ Receive(x, y))\n4. ∀x ∀y (PopularAmong(x, localResidents) → HaveRating(x, y) ∧ GreaterThan(y, 4))\n5. ∀x (HaveRating(hamdenPlazaSubway, x) ∧ GreaterThan(x, 4) ⊕ PopularAmong(hamdenPlazaSubway, localResidents))\nConclusion:\nIf the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.\nConclusion-FOL:\n∃x ((TakeOutService(hamdenPlazaSubway) ∧ NegativeReview(x) ∧ Receive(hamdenPlazaSubway, x) → PopularAmong(hamdenPlazaSubway, localResidents) ∧ ¬Provide(hamdenPlazaSubway, takeOutService))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.\n2. All restaurants with a rating greater than four are listed in Yelp’s recommendations.\n3. Some restaurants that do not provide take-out service receive many negative reviews.\n4. All restaurants that are popular among local residents have ratings greater than four.\n5. The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\nPremises-FOL:\n1. ∀x ∃y (ListedIn(x, yelpRecommendation) → NegativeReview(y) ∧ ¬Receive(x, y))\n2. ∀x ∀y (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))\n3. ∃x ∃y (¬Provide(x, takeOutService) → NegativeReview(y) ∧ Receive(x, y))\n4. ∀x ∀y (PopularAmong(x, localResidents) → HaveRating(x, y) ∧ GreaterThan(y, 4))\n5. ∀x (HaveRating(hamdenPlazaSubway, x) ∧ GreaterThan(x, 4) ⊕ PopularAmong(hamdenPlazaSubway, localResidents))\nConclusion:\nThe Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.\nConclusion-FOL:\n∃x (Provide(hamdenPlazaSubway, takeOutService) ∨ (NegativeReview(x) ∧ ¬Receive(hamdenPlazaSubway, x)))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.\n2. All restaurants with a rating greater than four are listed in Yelp’s recommendations.\n3. Some restaurants that do not provide take-out service receive many negative reviews.\n4. All restaurants that are popular among local residents have ratings greater than four.\n5. The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\nPremises-FOL:\n1. ∀x ∃y (ListedIn(x, yelpRecommendation) → NegativeReview(y) ∧ ¬Receive(x, y))\n2. ∀x ∀y (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))\n3. ∃x ∃y (¬Provide(x, takeOutService) → NegativeReview(y) ∧ Receive(x, y))\n4. ∀x ∀y (PopularAmong(x, localResidents) → HaveRating(x, y) ∧ GreaterThan(y, 4))\n5. ∀x (HaveRating(hamdenPlazaSubway, x) ∧ GreaterThan(x, 4) ⊕ PopularAmong(hamdenPlazaSubway, localResidents))\nConclusion:\nThe Hamden Plaza store does not provide take-out service.\nConclusion-FOL:\n¬Provide(hamdenPlazaSubway, takeOutService)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. In superhero movies, the good guys always win.\n2. The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n3. Good guys fight bad guys and vice versa.\n4. Sir Digby fights his nemesis.\n5. If a superhero movie is named after a character, that character is a good guy.\n6. The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\n7. If somebody wins a fight, the person they are fighting does not win.\n8. If a superhero movie is named after a character, that character is in the movie.\nPremises-FOL:\n1. ∀x ∀y (SuperheroMovie(x) ∧ In(y, x) ∧ GoodGuy(y) → Wins(y))\n2. SuperheroMovie(theSurprisingAdventuresofSirDigbyChickenCaesar)\n3. ∀x ∀y (GoodGuy(x) ∧ Fight(x, y) ⟷ BadGuy(y) ∧ Fight(y, x))\n4. Fight(sirDigby, sirDigbysNemesis)\n5. ∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → GoodGuy(y))\n6. NamedAfter(theSurprisingAdventuresofSirDigbyChickenCaesar, sirDigby)\n7. ∀x ∀y (Fights(x, y) ∧ Win(x) → ¬Wins(y))\n8. ∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → In(y, x))\nConclusion:\nSir Digby’s nemesis does not win.\nConclusion-FOL:\n¬Win(sirDigbysNemesis)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Books contain tons of knowledge.\n2. When a person reads a book, that person gains knowledge. \n3. If a person gains knowledge, they become smarter.\n4. Harry read the book “Walden” by Henry Thoreau.\nPremises-FOL:\n1. ∀x (Book(x) → Contains(x, knowledge))\n2. ∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))\n3. ∀x (Gains(x, knowledge) → Smarter(x))\n4. ReadBook(harry, walden) ∧ Book(walden)\nConclusion:\nWalden contains knowledge.\nConclusion-FOL:\nGains(harry, knowledge)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Books contain tons of knowledge.\n2. When a person reads a book, that person gains knowledge. \n3. If a person gains knowledge, they become smarter.\n4. Harry read the book “Walden” by Henry Thoreau.\nPremises-FOL:\n1. ∀x (Book(x) → Contains(x, knowledge))\n2. ∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))\n3. ∀x (Gains(x, knowledge) → Smarter(x))\n4. ReadBook(harry, walden) ∧ Book(walden)\nConclusion:\nHarry is smarter than before.\nConclusion-FOL:\nSmarter(harry)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Books contain tons of knowledge.\n2. When a person reads a book, that person gains knowledge. \n3. If a person gains knowledge, they become smarter.\n4. Harry read the book “Walden” by Henry Thoreau.\nPremises-FOL:\n1. ∀x (Book(x) → Contains(x, knowledge))\n2. ∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))\n3. ∀x (Gains(x, knowledge) → Smarter(x))\n4. ReadBook(harry, walden) ∧ Book(walden)\nConclusion:\nA smarter person has gained knowledge.\nConclusion-FOL:\n∀x (Smarter(x) → GainKnowledge(x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. A natural language processing task can be categorized as either a language generation task or a language understanding task.\n2. If the output of a natural language processing task is a text sequence, then it is a language generation task.\n3. Machine translation is a natural language processing task.\n4. The output of machine translation is a text sequence.\nPremises-FOL:\n1. ∀x (NaturalLanguageProcessingTask(x) → LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x))\n2. ∀x (NaturalLanguageProcessingTasks(x) ∧ OutputSequence(x, text) → LanguageGenerationTask(x))\n3. NaturalLanguageProcessingTask(machineTranslation)\n4. OutputSequence(machineTranslation, text)\nConclusion:\nMachine translation is a language generation task.\nConclusion-FOL:\nLanguageGenerationTask(machineTranslation)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. A natural language processing task can be categorized as either a language generation task or a language understanding task.\n2. If the output of a natural language processing task is a text sequence, then it is a language generation task.\n3. Machine translation is a natural language processing task.\n4. The output of machine translation is a text sequence.\nPremises-FOL:\n1. ∀x (NaturalLanguageProcessingTask(x) → LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x))\n2. ∀x (NaturalLanguageProcessingTasks(x) ∧ OutputSequence(x, text) → LanguageGenerationTask(x))\n3. NaturalLanguageProcessingTask(machineTranslation)\n4. OutputSequence(machineTranslation, text)\nConclusion:\nMachine translation is a language understanding task.\nConclusion-FOL:\nLanguageUnderstandingTask(machineTranslation)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Pets are allowed in some managed buildings.\n2. A deposit is required to rent an apartment in a managed building.\n3. The security deposit can be either equal to the monthly rent at a managed building or more.\n4. Fluffy is Tom's cat.\n5. Cats are pets.\n6. The Olive Garden is a managed building.\n7. The monthly rent at the Olive Garden is $2000.\n8. $2000 is more than $1500.\n9. Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n10. If a managed building allows pets, then people are allowed to move in with a pet. \nPremises-FOL:\n1. ∃x (ManagedBuilding(x) ∧ AllowPet(x))\n2. ∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))\n3. ∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y))\n4. Cat(fluffy) ∧ BelongTo(fluffy, tom)\n5. ∀x (Cat(x) → Pet(x))\n6. ManagedBuilding(oliveGarden)\n7. MonthlyRentAt(uSD2000, oliveGarden)\n8. MoreThan(uSD2000, uSD1500)\n9. ∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))\n10. ∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))\nConclusion:\nTom will rent an apartment in The Olive Garden.\nConclusion-FOL:\nRentApartmentIn(tom, oliveGarden)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Pets are allowed in some managed buildings.\n2. A deposit is required to rent an apartment in a managed building.\n3. The security deposit can be either equal to the monthly rent at a managed building or more.\n4. Fluffy is Tom's cat.\n5. Cats are pets.\n6. The Olive Garden is a managed building.\n7. The monthly rent at the Olive Garden is $2000.\n8. $2000 is more than $1500.\n9. Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n10. If a managed building allows pets, then people are allowed to move in with a pet. \nPremises-FOL:\n1. ∃x (ManagedBuilding(x) ∧ AllowPet(x))\n2. ∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))\n3. ∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y))\n4. Cat(fluffy) ∧ BelongTo(fluffy, tom)\n5. ∀x (Cat(x) → Pet(x))\n6. ManagedBuilding(oliveGarden)\n7. MonthlyRentAt(uSD2000, oliveGarden)\n8. MoreThan(uSD2000, uSD1500)\n9. ∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))\n10. ∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))\nConclusion:\nTom is allowed to move into an apartment in The Olive Garden with Fluffy.\nConclusion-FOL:\nAllowedToMoveInWith(tom, oliveGarden, fluffy)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Pets are allowed in some managed buildings.\n2. A deposit is required to rent an apartment in a managed building.\n3. The security deposit can be either equal to the monthly rent at a managed building or more.\n4. Fluffy is Tom's cat.\n5. Cats are pets.\n6. The Olive Garden is a managed building.\n7. The monthly rent at the Olive Garden is $2000.\n8. $2000 is more than $1500.\n9. Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n10. If a managed building allows pets, then people are allowed to move in with a pet. \nPremises-FOL:\n1. ∃x (ManagedBuilding(x) ∧ AllowPet(x))\n2. ∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))\n3. ∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y))\n4. Cat(fluffy) ∧ BelongTo(fluffy, tom)\n5. ∀x (Cat(x) → Pet(x))\n6. ManagedBuilding(oliveGarden)\n7. MonthlyRentAt(uSD2000, oliveGarden)\n8. MoreThan(uSD2000, uSD1500)\n9. ∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))\n10. ∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))\nConclusion:\nThe security deposit at the Olive Garden is either $2000 or more.\nConclusion-FOL:\n∀x (SecurityDeposit(x, oliveGarden) → MoreThan(x, uSD2000) ⊕ Equal(x, uSD2000))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All business organizations are legal entities.\n2. All companies are business organizations.\n3. All private companies are companies.\n4. All legal entities are created under law. \n5. All legal entities have legal obligations.\n6. If the Harvard Weekly Book Club is created under law, then it is not a private company. \nPremises-FOL:\n1. ∀x (BusinessOrganization(x) → LegalEntity(x))\n2. ∀x (Company(x) → BusinessOrganization(x))\n3. ∀x (PrivateCompany(x) → Company(x))\n4. ∀x (LegalEntity(x) → CreatedUnderLaw(x))\n5. ∀x (LegalEntity(x) → LegalObligation(x))\n6. CreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)\nConclusion:\nThe Harvard Weekly Book club has legal obligations.\nConclusion-FOL:\nLegalObligation(harvardWeeklyBookClub)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All business organizations are legal entities.\n2. All companies are business organizations.\n3. All private companies are companies.\n4. All legal entities are created under law. \n5. All legal entities have legal obligations.\n6. If the Harvard Weekly Book Club is created under law, then it is not a private company. \nPremises-FOL:\n1. ∀x (BusinessOrganization(x) → LegalEntity(x))\n2. ∀x (Company(x) → BusinessOrganization(x))\n3. ∀x (PrivateCompany(x) → Company(x))\n4. ∀x (LegalEntity(x) → CreatedUnderLaw(x))\n5. ∀x (LegalEntity(x) → LegalObligation(x))\n6. CreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)\nConclusion:\nThe Harvard Weekly Book club has legal obligations and is a private company.\nConclusion-FOL:\nLegalObligation(harvardWeeklyBookClub) ∧ PrivateCompany(harvardWeeklyBookClub)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All business organizations are legal entities.\n2. All companies are business organizations.\n3. All private companies are companies.\n4. All legal entities are created under law. \n5. All legal entities have legal obligations.\n6. If the Harvard Weekly Book Club is created under law, then it is not a private company. \nPremises-FOL:\n1. ∀x (BusinessOrganization(x) → LegalEntity(x))\n2. ∀x (Company(x) → BusinessOrganization(x))\n3. ∀x (PrivateCompany(x) → Company(x))\n4. ∀x (LegalEntity(x) → CreatedUnderLaw(x))\n5. ∀x (LegalEntity(x) → LegalObligation(x))\n6. CreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)\nConclusion:\nIf the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.\nConclusion-FOL:\nPrivateCompany(harvardWeeklyBookClub) → LegalObligation(harvardWeeklyBookClub) ⊕ CreatedUnderLaw(harvardWeeklyBookClub)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Animals are either invertebrates or vertebrates.\n2. All animals with backbones reproduce by male-and-female mating. \n3. All vertebrate animals have a backbone.\n4. All bees do not reproduce by male-and-female mating.\n5. All queen bees are bees.\n6. Harry is a bee.\nPremises-FOL:\n1. ∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))\n2. ∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))\n3. ∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))\n4. ∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))\n5. ∀x (QueenBee(x) → Bee(x))\n6. Bee(harry)\nConclusion:\nHarry is a queen bee.\nConclusion-FOL:\nQueenBee(harry)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Animals are either invertebrates or vertebrates.\n2. All animals with backbones reproduce by male-and-female mating. \n3. All vertebrate animals have a backbone.\n4. All bees do not reproduce by male-and-female mating.\n5. All queen bees are bees.\n6. Harry is a bee.\nPremises-FOL:\n1. ∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))\n2. ∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))\n3. ∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))\n4. ∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))\n5. ∀x (QueenBee(x) → Bee(x))\n6. Bee(harry)\nConclusion:\nHarry is an invertebrate or a queen bee.\nConclusion-FOL:\nInvertebrate(harry) ∨ QueenBee(harry)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Animals are either invertebrates or vertebrates.\n2. All animals with backbones reproduce by male-and-female mating. \n3. All vertebrate animals have a backbone.\n4. All bees do not reproduce by male-and-female mating.\n5. All queen bees are bees.\n6. Harry is a bee.\nPremises-FOL:\n1. ∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))\n2. ∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))\n3. ∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))\n4. ∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))\n5. ∀x (QueenBee(x) → Bee(x))\n6. Bee(harry)\nConclusion:\nIf Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.\nConclusion-FOL:\n¬(Invertebrate(harry) ⊕ With(harry, backbone)) → ¬Invertebrate(harry) ∧ ¬QueenBee(harry)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\n2. If people have siblings who were born together, then they were born in a multiple birth.\n3. If people complain often about annoying siblings, then they have siblings who were born together.\n4. If people live at home, then they do not live with strangers.\n5. If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \n6. Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\nPremises-FOL:\n1. ∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))\n2. ∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))\n3. ∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))\n4. ∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))\n5. ∀x (SpendTimeplayingWith(x, sibling) → LiveAt(x, home))\n6. ¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))\nConclusion:\nLuke spends a lot of time hanging out and playing with his siblings.\nConclusion-FOL:\nSpendTime(luke, playingWith, siblings)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\n2. If people have siblings who were born together, then they were born in a multiple birth.\n3. If people complain often about annoying siblings, then they have siblings who were born together.\n4. If people live at home, then they do not live with strangers.\n5. If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \n6. Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\nPremises-FOL:\n1. ∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))\n2. ∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))\n3. ∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))\n4. ∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))\n5. ∀x (SpendTimeplayingWith(x, sibling) → LiveAt(x, home))\n6. ¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))\nConclusion:\nLuke complains often about annoying siblings.\nConclusion-FOL:\nComplainAboutOften(luke, annoyingSiblings)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\n2. If people have siblings who were born together, then they were born in a multiple birth.\n3. If people complain often about annoying siblings, then they have siblings who were born together.\n4. If people live at home, then they do not live with strangers.\n5. If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \n6. Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\nPremises-FOL:\n1. ∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))\n2. ∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))\n3. ∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))\n4. ∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))\n5. ∀x (SpendTimeplayingWith(x, sibling) → LiveAt(x, home))\n6. ¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))\nConclusion:\nLuke is neither born in a multiple birth nor complains often about annoying siblings.\nConclusion-FOL:\n¬(BornIn(luke, multipleBirth) ∨ ComplainAbout(luke, often, annoyingSiblings) )",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. It costs $205 to take the GRE test, which is cheaper than $300.\n2. ETS provides financial aid to those GRE applicants who prove economic hardship.\n3. Those living in single-parent families or having few resources available to them can prove economic hardship.\n4. Tom lives in a single-parent family.\n5. Tom's dad has been out of work, and Tom has few resources available to them. \n6. Tom is applying to take the GRE test.\nPremises-FOL:\n1. Cost(gRE, 205) ∧ Cheaper(205, 300)\n2. ∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))\n3. ∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))\n4. LivingIn(tom, singleParentFamily)\n5. OutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)\n6. ApplicantOf(tom, gre)\nConclusion:\nETS provides financial aid to Tom.\nConclusion-FOL:\nProvidesFinancialAidTo(eTS, tom)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. It costs $205 to take the GRE test, which is cheaper than $300.\n2. ETS provides financial aid to those GRE applicants who prove economic hardship.\n3. Those living in single-parent families or having few resources available to them can prove economic hardship.\n4. Tom lives in a single-parent family.\n5. Tom's dad has been out of work, and Tom has few resources available to them. \n6. Tom is applying to take the GRE test.\nPremises-FOL:\n1. Cost(gRE, 205) ∧ Cheaper(205, 300)\n2. ∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))\n3. ∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))\n4. LivingIn(tom, singleParentFamily)\n5. OutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)\n6. ApplicantOf(tom, gre)\nConclusion:\nIt costs below US $300 to take the GRE test.\nConclusion-FOL:\nCost(gRE, x) ∧ Cheaper(x, 300)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. It costs $205 to take the GRE test, which is cheaper than $300.\n2. ETS provides financial aid to those GRE applicants who prove economic hardship.\n3. Those living in single-parent families or having few resources available to them can prove economic hardship.\n4. Tom lives in a single-parent family.\n5. Tom's dad has been out of work, and Tom has few resources available to them. \n6. Tom is applying to take the GRE test.\nPremises-FOL:\n1. Cost(gRE, 205) ∧ Cheaper(205, 300)\n2. ∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))\n3. ∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))\n4. LivingIn(tom, singleParentFamily)\n5. OutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)\n6. ApplicantOf(tom, gre)\nConclusion:\nNo one taking the GRE test has financial aid provided to them by something.\nConclusion-FOL:\n¬(∃x ∃y (Applicant(x, gRE) ∧ ProvidesFinancialAidTo(y, x)))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If people spill a lot of food on their clothing, then they are not notably tidy.\n2. All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n3. If people are cleanly, then they are notably tidy.\n4. If people value order and spotlessness, then they are cleanly.\n5. All people whose families prioritize order and spotlessness themselves value order and spotlessness.\n6. Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\nPremises-FOL:\n1. ∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))\n2. ∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))\n3. ∀x (Cleanly(x) → NotablyTidy(x))\n4. ∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))\n5. ∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness)) \n6. ¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))\nConclusion:\nPeter is notably tidy.\nConclusion-FOL:\nNotablyTidy(peter)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If people spill a lot of food on their clothing, then they are not notably tidy.\n2. All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n3. If people are cleanly, then they are notably tidy.\n4. If people value order and spotlessness, then they are cleanly.\n5. All people whose families prioritize order and spotlessness themselves value order and spotlessness.\n6. Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\nPremises-FOL:\n1. ∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))\n2. ∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))\n3. ∀x (Cleanly(x) → NotablyTidy(x))\n4. ∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))\n5. ∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness)) \n6. ¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))\nConclusion:\nPeter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.\nConclusion-FOL:\nClumsyFoodie(peter) ∨ (∃y (FamilyOf(y, peter) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If people spill a lot of food on their clothing, then they are not notably tidy.\n2. All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n3. If people are cleanly, then they are notably tidy.\n4. If people value order and spotlessness, then they are cleanly.\n5. All people whose families prioritize order and spotlessness themselves value order and spotlessness.\n6. Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\nPremises-FOL:\n1. ∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))\n2. ∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))\n3. ∀x (Cleanly(x) → NotablyTidy(x))\n4. ∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))\n5. ∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness)) \n6. ¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))\nConclusion:\nPeter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.\nConclusion-FOL:\n¬(ClumsyFoodie(peter) ⊕ (∃y (FamilyOf(y, peter) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness))))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All fir trees are evergreens.\n2. Some objects of worship are fir trees.\nPremises-FOL:\n1. ∀x (FirTree(x) → Evergreen(x))\n2. ∃x ∃y (ObjectOfWorship(x) ∧ ObjectOfWorship(y) ∧ FirTree(x) ∧ FirTree(y) ∧ ¬(x=y))\nConclusion:\nSome evergreens are not objects of worship.\nConclusion-FOL:\n∃x ∃y (Evergreen(x) ∧ Evergreen(y) ∧ ¬ObjectOfWorship(x) ∧ ¬ObjectOfWorship(y) ∧ ¬(x=y))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. The Picuris Mountains are a mountain range in New Mexico or Texas.\n2. Juan de Onate visited the Picuris Mountains.\n3. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n4. There are no mountain ranges in texas that have mines that have been donated.\nPremises-FOL:\n1. MountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))\n2. Visited(juanDeOnate, thePicurisMountains)\n3. In(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)\n4. ∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))\nConclusion:\nJuan de Onate visited a mountain range in New Mexico.\nConclusion-FOL:\n∃x (Visited(juanDeOnate, x) ∧ MountainRange(x) ∧ In(x, newMexico))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. The Picuris Mountains are a mountain range in New Mexico or Texas.\n2. Juan de Onate visited the Picuris Mountains.\n3. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n4. There are no mountain ranges in texas that have mines that have been donated.\nPremises-FOL:\n1. MountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))\n2. Visited(juanDeOnate, thePicurisMountains)\n3. In(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)\n4. ∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))\nConclusion:\nJuan de Onate visited a mountain range in Texas.\nConclusion-FOL:\n∃x (Visited(juanDeOnate, x) ∧ MountainRange(x) ∧ In(x, texas))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. The Picuris Mountains are a mountain range in New Mexico or Texas.\n2. Juan de Onate visited the Picuris Mountains.\n3. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n4. There are no mountain ranges in texas that have mines that have been donated.\nPremises-FOL:\n1. MountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))\n2. Visited(juanDeOnate, thePicurisMountains)\n3. In(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)\n4. ∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))\nConclusion:\nThe Harding Pegmatite Mine is not located in a mountain range in New Mexico.\nConclusion-FOL:\n∀x (In(hardingPegmatiteMine, x) → ¬(MountainRange(x) ∧ In(x, newMexico)))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If a man is taller than another man, the taller one can block the other's shooting.\n2. Michael is a man who is taller than everyone else in his class.\n3. If person x is taller than person y, and person y is taller than person z, then x is taller than z\n4. Peter is a man who is taller than Michael.\n5. Michael can block any shooting from a person as long as the person does not jump when shooting.\n6. Michael cannot block Windy's shooting.\n7. Every shooter who can jump when shooting is a great shooter.\nPremises-FOL:\n1. ∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))\n2. ∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))\n3. ∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))\n4. Man(peter) ∧ Taller(peter, michael)\n5. ∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))\n6. ¬CanBlock(michael, windy)\n7. ∀x (JumpWhenShooting(x) → GreatShooter(x))\nConclusion:\nPeter is shorter than a man in Michael's class.\nConclusion-FOL:\n∃x (Man(x) ∧ SameClass(x, michael) ∧ ¬Taller(peter, x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If a man is taller than another man, the taller one can block the other's shooting.\n2. Michael is a man who is taller than everyone else in his class.\n3. If person x is taller than person y, and person y is taller than person z, then x is taller than z\n4. Peter is a man who is taller than Michael.\n5. Michael can block any shooting from a person as long as the person does not jump when shooting.\n6. Michael cannot block Windy's shooting.\n7. Every shooter who can jump when shooting is a great shooter.\nPremises-FOL:\n1. ∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))\n2. ∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))\n3. ∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))\n4. Man(peter) ∧ Taller(peter, michael)\n5. ∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))\n6. ¬CanBlock(michael, windy)\n7. ∀x (JumpWhenShooting(x) → GreatShooter(x))\nConclusion:\nWindy is a great shooter.\nConclusion-FOL:\nGreatShooter(windy)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If a man is taller than another man, the taller one can block the other's shooting.\n2. Michael is a man who is taller than everyone else in his class.\n3. If person x is taller than person y, and person y is taller than person z, then x is taller than z\n4. Peter is a man who is taller than Michael.\n5. Michael can block any shooting from a person as long as the person does not jump when shooting.\n6. Michael cannot block Windy's shooting.\n7. Every shooter who can jump when shooting is a great shooter.\nPremises-FOL:\n1. ∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))\n2. ∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))\n3. ∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))\n4. Man(peter) ∧ Taller(peter, michael)\n5. ∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))\n6. ¬CanBlock(michael, windy)\n7. ∀x (JumpWhenShooting(x) → GreatShooter(x))\nConclusion:\nPeter can block Windy's shooting.\nConclusion-FOL:\nCanBlock(peter, windy)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\n2. Barutin Cove is on the southwest coast of Snow Island.\n3. Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\n4. Antarctica is located on the South Shetland Islands. \n5. If place A is located in place B and place B is located in place C, then place A is located in place C.\nPremises-FOL:\n1. Cove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)\n2. LocatedIn(barutinCove, snowIsland)\n3. LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)\n4. LocatedIn(southShetlandIslands, antarctica)\n5. ∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))\nConclusion:\nBarutin Cove is named after all islands in Antarctica.\nConclusion-FOL:\n∀x (LocatedIn(x, antarctica) → NamedAfter(barutinCove, x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\n2. Barutin Cove is on the southwest coast of Snow Island.\n3. Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\n4. Antarctica is located on the South Shetland Islands. \n5. If place A is located in place B and place B is located in place C, then place A is located in place C.\nPremises-FOL:\n1. Cove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)\n2. LocatedIn(barutinCove, snowIsland)\n3. LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)\n4. LocatedIn(southShetlandIslands, antarctica)\n5. ∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))\nConclusion:\nThere is at least one cove in Antarctica named after a place in Bulgaria.\nConclusion-FOL:\n∃x ∃y (Cove(x) ∧ LocatedIn(x, antarctica) ∧ NameAfter(x, y) ∧ LocatedIn(y, bulgaria))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\n2. Barutin Cove is on the southwest coast of Snow Island.\n3. Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\n4. Antarctica is located on the South Shetland Islands. \n5. If place A is located in place B and place B is located in place C, then place A is located in place C.\nPremises-FOL:\n1. Cove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)\n2. LocatedIn(barutinCove, snowIsland)\n3. LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)\n4. LocatedIn(southShetlandIslands, antarctica)\n5. ∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))\nConclusion:\nBarutin Cove is not located in Antarctica.\nConclusion-FOL:\n¬LocatedIn(barutinCove, antarctica)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some affection is love.\n2. Some love is positive.\nPremises-FOL:\n1. ∃x (Affection(x) ∧ Love(x))\n2. ∃x (Love(x) ∧ Positive(x))\nConclusion:\nSome affection is positive.\nConclusion-FOL:\n∃x (Affection(x) ∧ Positive(x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If something can transport multiple passengers, then they are not one-seaters.\n2. All Tesla Model 3 can transport multiple passengers.\n3. All single-seat electric cars are one-seaters.\n4. All Solo EV cars are single-seat electric cars. \n5. If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \nPremises-FOL:\n1. ∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)) → ¬OneSeater(x))\n2. ∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)))\n3. ∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))\n4. ∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))\n5. ¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(x) ∧ ElectricCar(johnsCar)))\nConclusion:\nJohn's car is a Tesla Model 3.\nConclusion-FOL:\nTeslaModel3(johnsCar)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If something can transport multiple passengers, then they are not one-seaters.\n2. All Tesla Model 3 can transport multiple passengers.\n3. All single-seat electric cars are one-seaters.\n4. All Solo EV cars are single-seat electric cars. \n5. If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \nPremises-FOL:\n1. ∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)) → ¬OneSeater(x))\n2. ∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)))\n3. ∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))\n4. ∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))\n5. ¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(x) ∧ ElectricCar(johnsCar)))\nConclusion:\nJohn's car is a Solo EV.\nConclusion-FOL:\nSoloEV(johnsCar) ∧ Car(johnsCar)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If something can transport multiple passengers, then they are not one-seaters.\n2. All Tesla Model 3 can transport multiple passengers.\n3. All single-seat electric cars are one-seaters.\n4. All Solo EV cars are single-seat electric cars. \n5. If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \nPremises-FOL:\n1. ∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)) → ¬OneSeater(x))\n2. ∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)))\n3. ∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))\n4. ∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))\n5. ¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(x) ∧ ElectricCar(johnsCar)))\nConclusion:\nJohn's car is not a Solo EV.\nConclusion-FOL:\n¬(SoloEV(johnsCar) ∧ Car(johnsCar))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All of Peter's pets that are mammals are also animals.\n2. All monkeys are mammals. \n3. Peter's pets are all either monkeys or birds. \n4. Peter's birds can fly.\n5. All animals that are Peter's pets can breathe.\n6. If Peter's pet can fly, then it has wings.\n7. Rock is Peter's pet.\n8. Rock can fly, or Rock is a bird, or Rock cannot breathe. \nPremises-FOL:\n1. ∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))\n2. ∀x (Monkey(x) → Mammal(x))\n3. ∀x (PetersPet(x) → Monkey(x) ⊕  Bird(x))\n4. ∀x (Bird(x) → CanFly(x))\n5. ∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))\n6. ∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))\n7. PeterSPet(rock)\n8. CanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)\nConclusion:\nRock is a monkey.\nConclusion-FOL:\nMonkey(rock)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All of Peter's pets that are mammals are also animals.\n2. All monkeys are mammals. \n3. Peter's pets are all either monkeys or birds. \n4. Peter's birds can fly.\n5. All animals that are Peter's pets can breathe.\n6. If Peter's pet can fly, then it has wings.\n7. Rock is Peter's pet.\n8. Rock can fly, or Rock is a bird, or Rock cannot breathe. \nPremises-FOL:\n1. ∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))\n2. ∀x (Monkey(x) → Mammal(x))\n3. ∀x (PetersPet(x) → Monkey(x) ⊕  Bird(x))\n4. ∀x (Bird(x) → CanFly(x))\n5. ∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))\n6. ∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))\n7. PeterSPet(rock)\n8. CanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)\nConclusion:\nRock has wings.\nConclusion-FOL:\n∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(rock, y) ∧ Have(rock, z))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All of Peter's pets that are mammals are also animals.\n2. All monkeys are mammals. \n3. Peter's pets are all either monkeys or birds. \n4. Peter's birds can fly.\n5. All animals that are Peter's pets can breathe.\n6. If Peter's pet can fly, then it has wings.\n7. Rock is Peter's pet.\n8. Rock can fly, or Rock is a bird, or Rock cannot breathe. \nPremises-FOL:\n1. ∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))\n2. ∀x (Monkey(x) → Mammal(x))\n3. ∀x (PetersPet(x) → Monkey(x) ⊕  Bird(x))\n4. ∀x (Bird(x) → CanFly(x))\n5. ∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))\n6. ∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))\n7. PeterSPet(rock)\n8. CanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)\nConclusion:\nRock does not have wings.\nConclusion-FOL:\n¬(∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(rock, y) ∧ Have(rock, z)))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All people who make wedding plans are people who are engaged.\n2. All people who invite others to come to their ceremony make wedding plans.\n3. Anyone who has a well-attended wedding invites others to come to their ceremony.\n4. Some people that have well-attended weddings have larger families.\n5. If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n6. If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \nPremises-FOL:\n1. ∀x (Make(x, weddingPlan) → Engaged(x))\n2. ∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))\n3. ∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))\n4. ∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))\n5. Engaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)\n6. Have(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))\nConclusion:\nJohn has a larger family.\nConclusion-FOL:\nHave(john, largeFamily)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All people who make wedding plans are people who are engaged.\n2. All people who invite others to come to their ceremony make wedding plans.\n3. Anyone who has a well-attended wedding invites others to come to their ceremony.\n4. Some people that have well-attended weddings have larger families.\n5. If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n6. If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \nPremises-FOL:\n1. ∀x (Make(x, weddingPlan) → Engaged(x))\n2. ∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))\n3. ∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))\n4. ∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))\n5. Engaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)\n6. Have(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))\nConclusion:\nJohn does not have a larger family.\nConclusion-FOL:\n¬Have(john, largerFamily)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All people who make wedding plans are people who are engaged.\n2. All people who invite others to come to their ceremony make wedding plans.\n3. Anyone who has a well-attended wedding invites others to come to their ceremony.\n4. Some people that have well-attended weddings have larger families.\n5. If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n6. If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \nPremises-FOL:\n1. ∀x (Make(x, weddingPlan) → Engaged(x))\n2. ∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))\n3. ∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))\n4. ∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))\n5. Engaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)\n6. Have(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))\nConclusion:\nJohn is engaged.\nConclusion-FOL:\nEngaged(john)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All people who make wedding plans are people who are engaged.\n2. All people who invite others to come to their ceremony make wedding plans.\n3. Anyone who has a well-attended wedding invites others to come to their ceremony.\n4. Some people that have well-attended weddings have larger families.\n5. If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n6. If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \nPremises-FOL:\n1. ∀x (Make(x, weddingPlan) → Engaged(x))\n2. ∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))\n3. ∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))\n4. ∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))\n5. Engaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)\n6. Have(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))\nConclusion:\nJohn neither has a larger family nor does he invite others to his wedding.\nConclusion-FOL:\n¬Have(john, largerFamily) ∧ ¬(∃y ∃z (¬(y=john) ∧ ¬(z=john) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ InviteToComeTo(john, z, wedding)))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some mammals have teeth.\n2. Platypuses have no teeth.\n3. Platypuses are mammals. \n4. Humans have teeth.\nPremises-FOL:\n1. ∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ (¬(x=y)) ∧ Have(x, teeth) ∧ Have(y, teeth))\n2. ¬Have(platypus, teeth)\n3. Mammal(platypus)\n4. Have(humans, teeth)\nConclusion:\nPlatypuses are mammals with no teeth.\nConclusion-FOL:\nMammal(platypus) ∧ (¬Have(platypus, teeth))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some mammals have teeth.\n2. Platypuses have no teeth.\n3. Platypuses are mammals. \n4. Humans have teeth.\nPremises-FOL:\n1. ∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ (¬(x=y)) ∧ Have(x, teeth) ∧ Have(y, teeth))\n2. ¬Have(platypus, teeth)\n3. Mammal(platypus)\n4. Have(humans, teeth)\nConclusion:\nPlatypuses are reptiles.\nConclusion-FOL:\nReptile(platypus)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some mammals have teeth.\n2. Platypuses have no teeth.\n3. Platypuses are mammals. \n4. Humans have teeth.\nPremises-FOL:\n1. ∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ (¬(x=y)) ∧ Have(x, teeth) ∧ Have(y, teeth))\n2. ¬Have(platypus, teeth)\n3. Mammal(platypus)\n4. Have(humans, teeth)\nConclusion:\nHumans are mammals.\nConclusion-FOL:\nMammal(humans)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Plungers suck.\n2. Vacuums suck.\n3. Vampires suck.\n4. Space is a vacuum.\n5. A duster is a household appliance that doesn't suck.\nPremises-FOL:\n1. ∀x (Plunger(x) → Suck(x))\n2. ∀x (Vacuum(x) → Suck(x))\n3. ∀x (Vampire(x) → Suck(x))\n4. Vacuum(space)\n5. HouseholdAppliance(duster) ∧ ¬Suck(duster)\nConclusion:\nSpace sucks.\nConclusion-FOL:\nSuck(space)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Plungers suck.\n2. Vacuums suck.\n3. Vampires suck.\n4. Space is a vacuum.\n5. A duster is a household appliance that doesn't suck.\nPremises-FOL:\n1. ∀x (Plunger(x) → Suck(x))\n2. ∀x (Vacuum(x) → Suck(x))\n3. ∀x (Vampire(x) → Suck(x))\n4. Vacuum(space)\n5. HouseholdAppliance(duster) ∧ ¬Suck(duster)\nConclusion:\nSpace is a vampire.\nConclusion-FOL:\nVampire(space)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Plungers suck.\n2. Vacuums suck.\n3. Vampires suck.\n4. Space is a vacuum.\n5. A duster is a household appliance that doesn't suck.\nPremises-FOL:\n1. ∀x (Plunger(x) → Suck(x))\n2. ∀x (Vacuum(x) → Suck(x))\n3. ∀x (Vampire(x) → Suck(x))\n4. Vacuum(space)\n5. HouseholdAppliance(duster) ∧ ¬Suck(duster)\nConclusion:\nIf something is a household appliance, it sucks.\nConclusion-FOL:\n∀x (HouseHoldApp(x) → Suck(x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n2. Unsupervised learning algorithms do not require labeled data.\n3. The state-of-the-art text summarization model is trained with machine learning algorithms.\n4. Reinforcement learning is not used to train the state-of-the-art text summarization model.\n5. The Machine Learning algorithm for training text summarization models requires labeled data.\nPremises-FOL:\n1. ∀x (MachineLearningAlgorithm(x) → SupervisedLearningAlgorithm(x) ∨ UnsupervisedLearningAlgorithm(x) ∨ ReinforcementLearningAlgorithm(x))\n2. ∀x (UnsupervisedLearningAlgorithm(x) → ¬Require(x, labeledData))\n3. ∀x (TrainedWith(stateOfTheArtTextSummarizationModel, x) → MachineLearningAlgorithm(x))\n4. ∀x (ReinforcementLearningAlgorithm(x) → ¬TrainedWith(stateOfTheArtTextSummarizationModel, x))\n5. ∀x ((MachineLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x)) → Require(x, labeledData))\nConclusion:\nSupervised learning is used to train the state-of-the-art text summarization model.\nConclusion-FOL:\n∃x (SupervisedLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n2. Unsupervised learning algorithms do not require labeled data.\n3. The state-of-the-art text summarization model is trained with machine learning algorithms.\n4. Reinforcement learning is not used to train the state-of-the-art text summarization model.\n5. The Machine Learning algorithm for training text summarization models requires labeled data.\nPremises-FOL:\n1. ∀x (MachineLearningAlgorithm(x) → SupervisedLearningAlgorithm(x) ∨ UnsupervisedLearningAlgorithm(x) ∨ ReinforcementLearningAlgorithm(x))\n2. ∀x (UnsupervisedLearningAlgorithm(x) → ¬Require(x, labeledData))\n3. ∀x (TrainedWith(stateOfTheArtTextSummarizationModel, x) → MachineLearningAlgorithm(x))\n4. ∀x (ReinforcementLearningAlgorithm(x) → ¬TrainedWith(stateOfTheArtTextSummarizationModel, x))\n5. ∀x ((MachineLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x)) → Require(x, labeledData))\nConclusion:\nUnsupervised learning is used to train the state-of-the-art text summarization model.\nConclusion-FOL:\n∃x (UnsupervisedLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\n2. If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\n3. If a film is rated General Audience, then it is appropriate for people of all ages.\n4. All family-friendly animated films are rated General Audience.\n5. All movies in the Frozen series are family-friendly animated films.\n6. “Hachi: A dog’s Tale” is a film.\n7. “Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. \nPremises-FOL:\n1. ∀x (Film(x) ∧ Rated(x, adultsOnly) → CanWatchWithout(children, x, guidanceFromParents))\n2. ∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))\n3. ∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))\n4. ∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))\n5. ∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))\n6. Film(hachiAdogsTale)\n7. (FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ⊕ Rated(hachiAdogsTale, adultsOnly)\nConclusion:\n\"Hachi: A dog's Tale\" is rated General Audience.\nConclusion-FOL:\nRated(x, generalAudience)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\n2. If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\n3. If a film is rated General Audience, then it is appropriate for people of all ages.\n4. All family-friendly animated films are rated General Audience.\n5. All movies in the Frozen series are family-friendly animated films.\n6. “Hachi: A dog’s Tale” is a film.\n7. “Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. \nPremises-FOL:\n1. ∀x (Film(x) ∧ Rated(x, adultsOnly) → CanWatchWithout(children, x, guidanceFromParents))\n2. ∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))\n3. ∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))\n4. ∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))\n5. ∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))\n6. Film(hachiAdogsTale)\n7. (FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ⊕ Rated(hachiAdogsTale, adultsOnly)\nConclusion:\n\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.\nConclusion-FOL:\n(Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent)) ∨ InfrozenSeries(excessiveViolentContent)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\n2. If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\n3. If a film is rated General Audience, then it is appropriate for people of all ages.\n4. All family-friendly animated films are rated General Audience.\n5. All movies in the Frozen series are family-friendly animated films.\n6. “Hachi: A dog’s Tale” is a film.\n7. “Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. \nPremises-FOL:\n1. ∀x (Film(x) ∧ Rated(x, adultsOnly) → CanWatchWithout(children, x, guidanceFromParents))\n2. ∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))\n3. ∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))\n4. ∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))\n5. ∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))\n6. Film(hachiAdogsTale)\n7. (FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ⊕ Rated(hachiAdogsTale, adultsOnly)\nConclusion:\n\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.\nConclusion-FOL:\n¬((Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent)) ⊕ InfrozenSeries(excessiveViolentContent))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\n2. Heck cattle were bred back in the 1920s to resemble the aurochs.\n3. Heck cattle are animals.\n4. Aurochs are animals.\n5. Some animals to be bred back resemble extinct animals.\nPremises-FOL:\n1. ∀x (BreedingBack(x) → (ArtificialSelection(x) ∧ DeliberateSelectiveBreedingOfDomesticAnimals(x)))\n2. ∃x ∃y (HeckCattle(x) ∧ BreedingBack(x) ∧ Auroch(y) ∧ Resemble(x, y))\n3. ∀x (HeckCattle(x) → Animal(x))\n4. ∀x (Auroch(x) → Animal(x))\n5. ∃x ∃y (Animal(x) ∧ Animal(y) ∧ (¬(x=y)) ∧ BreedingBack(x) ∧ BreedingBack(y) ∧ (∃w(Dead(w) ∧ Resemble(x, w)) ∧ (¬(w=z)) ∧ (∃z(Dead(z) ∧ Resemble(y, z))))\nConclusion:\nSome Heck cattle are artificially selected.\nConclusion-FOL:\n∃x ∃y(HeckCattle(x) ∧ ArtificialSelection(x) ∧ (¬(x=y)) ∧ HeckCattle(y) ∧ ArtificialSelection(y))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\n2. Heck cattle were bred back in the 1920s to resemble the aurochs.\n3. Heck cattle are animals.\n4. Aurochs are animals.\n5. Some animals to be bred back resemble extinct animals.\nPremises-FOL:\n1. ∀x (BreedingBack(x) → (ArtificialSelection(x) ∧ DeliberateSelectiveBreedingOfDomesticAnimals(x)))\n2. ∃x ∃y (HeckCattle(x) ∧ BreedingBack(x) ∧ Auroch(y) ∧ Resemble(x, y))\n3. ∀x (HeckCattle(x) → Animal(x))\n4. ∀x (Auroch(x) → Animal(x))\n5. ∃x ∃y (Animal(x) ∧ Animal(y) ∧ (¬(x=y)) ∧ BreedingBack(x) ∧ BreedingBack(y) ∧ (∃w(Dead(w) ∧ Resemble(x, w)) ∧ (¬(w=z)) ∧ (∃z(Dead(z) ∧ Resemble(y, z))))\nConclusion:\nAurochs are extinct.\nConclusion-FOL:\n∀x (Auroch(x) → Dead(x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n2. If someone has United States citizenship, then they can register to vote in the United States.\n3. A person either has United States citizenship or Taiwanese citizenship.\n4. No Russian Federation officials hold Taiwanese citizenship. \n5. Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \n6. Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nPremises-FOL:\n1. ∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n2. ∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n3. ∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n4. ∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n5. ¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n6. (Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\nConclusion:\nVladimir is a Russian federation official\nConclusion-FOL:\nRussian(vladimir) ∧ FederationOfficial(vladimir)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n2. If someone has United States citizenship, then they can register to vote in the United States.\n3. A person either has United States citizenship or Taiwanese citizenship.\n4. No Russian Federation officials hold Taiwanese citizenship. \n5. Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \n6. Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nPremises-FOL:\n1. ∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n2. ∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n3. ∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n4. ∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n5. ¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n6. (Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\nConclusion:\nVladimir is not a Russian federation official\nConclusion-FOL:\n¬(Russian(vladimir) ∧ FederationOfficial(vladimir))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n2. If someone has United States citizenship, then they can register to vote in the United States.\n3. A person either has United States citizenship or Taiwanese citizenship.\n4. No Russian Federation officials hold Taiwanese citizenship. \n5. Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \n6. Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nPremises-FOL:\n1. ∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n2. ∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n3. ∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n4. ∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n5. ¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n6. (Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\nConclusion:\nEkaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.\nConclusion-FOL:\nCanParticipateIn(ekaterina, 2024UnitedStatesElection) ∨ ManagerAt(ekaterina, gazprom)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n2. If someone has United States citizenship, then they can register to vote in the United States.\n3. A person either has United States citizenship or Taiwanese citizenship.\n4. No Russian Federation officials hold Taiwanese citizenship. \n5. Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \n6. Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nPremises-FOL:\n1. ∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n2. ∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n3. ∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n4. ∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n5. ¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n6. (Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\nConclusion:\nEkaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.\nConclusion-FOL:\nCanParticipateIn(ekaterina, 2024UnitedStatesElection) ⊕ ManagerAt(vladimir, gazprom)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n2. If someone has United States citizenship, then they can register to vote in the United States.\n3. A person either has United States citizenship or Taiwanese citizenship.\n4. No Russian Federation officials hold Taiwanese citizenship. \n5. Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \n6. Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nPremises-FOL:\n1. ∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n2. ∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n3. ∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n4. ∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n5. ¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n6. (Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\nConclusion:\nIt is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.\nConclusion-FOL:\nCanRegisterToVoteIn(ekaterina, unitedStates) ∧ CanParticipateIn(vladimir, 2024UnitedStatesElection)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. New Vessel Press is a publishing house specializing in translating foreign literature into English.\n2. All of New Vessel Press's published books are in English.\n3. Neapolitan Chronicles is a book published by New Vessel Press.\n4. Neapolitan Chronicles was translated from Italian.\n5. Palace of Flies is a book published by New Vessel Press.\nPremises-FOL:\n1. PublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)\n2. ∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))\n3. Book(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)\n4. TranslatedFrom(neapolitanChronicles, italian)\n5. Book(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)\nConclusion:\nNeapolitan Chronicles is an English book.\nConclusion-FOL:\nBook(neapolitanChronicles) ∧ In(neapolitanChronicles, english)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. New Vessel Press is a publishing house specializing in translating foreign literature into English.\n2. All of New Vessel Press's published books are in English.\n3. Neapolitan Chronicles is a book published by New Vessel Press.\n4. Neapolitan Chronicles was translated from Italian.\n5. Palace of Flies is a book published by New Vessel Press.\nPremises-FOL:\n1. PublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)\n2. ∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))\n3. Book(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)\n4. TranslatedFrom(neapolitanChronicles, italian)\n5. Book(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)\nConclusion:\nHarry Potter was published by New Vessel Press.\nConclusion-FOL:\nPublishedBy(harryPotter, newVesselPress)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. New Vessel Press is a publishing house specializing in translating foreign literature into English.\n2. All of New Vessel Press's published books are in English.\n3. Neapolitan Chronicles is a book published by New Vessel Press.\n4. Neapolitan Chronicles was translated from Italian.\n5. Palace of Flies is a book published by New Vessel Press.\nPremises-FOL:\n1. PublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)\n2. ∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))\n3. Book(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)\n4. TranslatedFrom(neapolitanChronicles, italian)\n5. Book(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)\nConclusion:\nPalace of Flies was translated from Italian.\nConclusion-FOL:\nTranslatedFrom(palaceOfFlies, italian)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All hydrocarbons are organic compounds .\n2. All alkanes are hydrocarbons\n3. All organic compounds are chemical compounds.\n4. All organic compounds contain carbon.\n5. No chemical compounds contain only one element.\n6. The mixture either both is a chemical compound and contains only one element, or neither. \nPremises-FOL:\n1. ∀x (Hydrocarbon(x) → Orgranic(x) ∧ Compound(x))\n2. ∀x (Alkane(x) → Hydrocarbon(x))\n3. ∀x (Orgranic(x) ∧ Compound(x) → Chemical(x) ∧ Compound(x))\n4. ∀x (Orgranic(x) ∧ Compound(x) → Contain(x, carbon))\n5. ∀x (Chemical(x) ∧ Compound(x) → ∀y ∀z (¬(Contain(x, y) ∧ Contain(x, z) ∧ (y=z))))\n6. ¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(x, y) ∧ Contain(x, z) ∧ y=z)))\nConclusion:\nThe mixture contains carbon.\nConclusion-FOL:\nContain(mixture, carbon)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All hydrocarbons are organic compounds .\n2. All alkanes are hydrocarbons\n3. All organic compounds are chemical compounds.\n4. All organic compounds contain carbon.\n5. No chemical compounds contain only one element.\n6. The mixture either both is a chemical compound and contains only one element, or neither. \nPremises-FOL:\n1. ∀x (Hydrocarbon(x) → Orgranic(x) ∧ Compound(x))\n2. ∀x (Alkane(x) → Hydrocarbon(x))\n3. ∀x (Orgranic(x) ∧ Compound(x) → Chemical(x) ∧ Compound(x))\n4. ∀x (Orgranic(x) ∧ Compound(x) → Contain(x, carbon))\n5. ∀x (Chemical(x) ∧ Compound(x) → ∀y ∀z (¬(Contain(x, y) ∧ Contain(x, z) ∧ (y=z))))\n6. ¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(x, y) ∧ Contain(x, z) ∧ y=z)))\nConclusion:\nThe mixture is an alkane and contains carbon.\nConclusion-FOL:\nAlkane(mixture) ∧ Contain(mixture, carbon)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All hydrocarbons are organic compounds .\n2. All alkanes are hydrocarbons\n3. All organic compounds are chemical compounds.\n4. All organic compounds contain carbon.\n5. No chemical compounds contain only one element.\n6. The mixture either both is a chemical compound and contains only one element, or neither. \nPremises-FOL:\n1. ∀x (Hydrocarbon(x) → Orgranic(x) ∧ Compound(x))\n2. ∀x (Alkane(x) → Hydrocarbon(x))\n3. ∀x (Orgranic(x) ∧ Compound(x) → Chemical(x) ∧ Compound(x))\n4. ∀x (Orgranic(x) ∧ Compound(x) → Contain(x, carbon))\n5. ∀x (Chemical(x) ∧ Compound(x) → ∀y ∀z (¬(Contain(x, y) ∧ Contain(x, z) ∧ (y=z))))\n6. ¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(x, y) ∧ Contain(x, z) ∧ y=z)))\nConclusion:\nIf the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.\nConclusion-FOL:\n(∀x ∀y (Contain(mixture, x) ∧ Contain(mixture, y) ∧ x=y)) ∨ Contain(mixture, carbon) → ¬(Chemical(mixture) ∧ Compound(mixture)) ∧ ¬Alkane(mixture))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All humans are mortal.\n2. All Greeks are humans.\nPremises-FOL:\n1. ∀x (Human(x) → Mortal(x))\n2. ∀x (Greek(x) → Human(x))\nConclusion:\nSome Greeks are mortal.\nConclusion-FOL:\n∃x ∃y (Greek(x) ∧ Greek(y) ∧ Mortal(x) ∧ Mortal(y) ∧ ¬(x=y))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. None of the students who currently work in the library are from the computer science department. \n2. All of the students with part-time jobs offered by the university currently work in the library. \n3. All of the students who are taking the database course are from the computer science department. \n4. All of the students taking a class with Professor David are taking the database course. \n5. All students working in the lab are taking a class with Professor David.\n6. James is a student working in the lab. \n7. James doesn't work in the lab or have a part-time job offered by the university.\nPremises-FOL:\n1. ∀x (Student(x) ∧ WorkIn(x, library) → (¬From(x, computerScienceDepartment)))\n2. ∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))\n3. ∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))\n4. ∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))\n5. ∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))\n6. Student(james) ∧ WorkIn(james, lab)\n7. ¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)\nConclusion:\nJames has a part-time job offered by the university.\nConclusion-FOL:\n∃y (PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. None of the students who currently work in the library are from the computer science department. \n2. All of the students with part-time jobs offered by the university currently work in the library. \n3. All of the students who are taking the database course are from the computer science department. \n4. All of the students taking a class with Professor David are taking the database course. \n5. All students working in the lab are taking a class with Professor David.\n6. James is a student working in the lab. \n7. James doesn't work in the lab or have a part-time job offered by the university.\nPremises-FOL:\n1. ∀x (Student(x) ∧ WorkIn(x, library) → (¬From(x, computerScienceDepartment)))\n2. ∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))\n3. ∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))\n4. ∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))\n5. ∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))\n6. Student(james) ∧ WorkIn(james, lab)\n7. ¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)\nConclusion:\nJames does not have a part-time job offered by the university.\nConclusion-FOL:\n¬∃y(PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. None of the students who currently work in the library are from the computer science department. \n2. All of the students with part-time jobs offered by the university currently work in the library. \n3. All of the students who are taking the database course are from the computer science department. \n4. All of the students taking a class with Professor David are taking the database course. \n5. All students working in the lab are taking a class with Professor David.\n6. James is a student working in the lab. \n7. James doesn't work in the lab or have a part-time job offered by the university.\nPremises-FOL:\n1. ∀x (Student(x) ∧ WorkIn(x, library) → (¬From(x, computerScienceDepartment)))\n2. ∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))\n3. ∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))\n4. ∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))\n5. ∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))\n6. Student(james) ∧ WorkIn(james, lab)\n7. ¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)\nConclusion:\nJames either takes the database course or has a part-time job offered by the university.\nConclusion-FOL:\nTake(james, databaseCourse) ⊕ (∃y (PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. None of the students who currently work in the library are from the computer science department. \n2. All of the students with part-time jobs offered by the university currently work in the library. \n3. All of the students who are taking the database course are from the computer science department. \n4. All of the students taking a class with Professor David are taking the database course. \n5. All students working in the lab are taking a class with Professor David.\n6. James is a student working in the lab. \n7. James doesn't work in the lab or have a part-time job offered by the university.\nPremises-FOL:\n1. ∀x (Student(x) ∧ WorkIn(x, library) → (¬From(x, computerScienceDepartment)))\n2. ∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))\n3. ∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))\n4. ∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))\n5. ∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))\n6. Student(james) ∧ WorkIn(james, lab)\n7. ¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)\nConclusion:\nJames takes the database course.\nConclusion-FOL:\nTake(james, databaseCourse)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If George likes music, he wants to compose.\n2. If George has access to a program, he can compose.\n3. If George can compose and wants to compose, he will compose.\nPremises-FOL:\n1. LikeMusic(george) → WantToCompose(george)\n2. AccesstoProgram(george) → CanCompose(george)\n3. (WantToCompose(george) ∧ CanCompose(george)) → WillCompose(george)\nConclusion:\nIf George likes music and has access to a program, he will compose.\nConclusion-FOL:\n(LikeMusic(george) ∧ AccesstoProgram(george)) → WillCompose(george)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If George likes music, he wants to compose.\n2. If George has access to a program, he can compose.\n3. If George can compose and wants to compose, he will compose.\nPremises-FOL:\n1. LikeMusic(george) → WantToCompose(george)\n2. AccesstoProgram(george) → CanCompose(george)\n3. (WantToCompose(george) ∧ CanCompose(george)) → WillCompose(george)\nConclusion:\nIf George will not compose, George can not compose.\nConclusion-FOL:\n¬WantToCompose(george) → ¬WillCompose(george)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. A hawk never swims. \n2. Some birds are hawks.\nPremises-FOL:\n1. ∀x (Hawk(x) → ¬Swim(x))\n2. ∃x ∃y (Bird(x) ∧ Bird(y) ∧ Hawk(x) ∧ Hawk(y) ∧ ¬(x=y))\nConclusion:\nAll birds swim.\nConclusion-FOL:\n∀x (Bird(x) → Swim(x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some show airing at 8 pm on Monday gives out roses on TV.\n2. If a show gives out roses on TV, then the show is an episode of The Bachelor.\n3. The Bachelor portrays the lives of real people.\n4. All shows portraying the lives of real people are reality TV shows.\n5. Breaking Bad is a show.\n6. Breaking Bad is not a reality TV show.\nPremises-FOL:\n1. ∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))\n2. ∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))\n3. ∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))\n4. ∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))\n5. Show(breakingBad)\n6. ¬RealityTVShow(breakingBad)\nConclusion:\nBreaking Bad is on Monday at 8 pm.\nConclusion-FOL:\n∀x (MondayAt8PM(x) ∧ On(breakingBad, x))",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some show airing at 8 pm on Monday gives out roses on TV.\n2. If a show gives out roses on TV, then the show is an episode of The Bachelor.\n3. The Bachelor portrays the lives of real people.\n4. All shows portraying the lives of real people are reality TV shows.\n5. Breaking Bad is a show.\n6. Breaking Bad is not a reality TV show.\nPremises-FOL:\n1. ∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))\n2. ∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))\n3. ∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))\n4. ∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))\n5. Show(breakingBad)\n6. ¬RealityTVShow(breakingBad)\nConclusion:\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nConclusion-FOL:\n∀x ∀y (MondayAt8PM(x) ∧ Rose(y) ∧ GivenOutOn(y, tv) ∧ On(tv, x) ∧ From(y, breakingBad))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some show airing at 8 pm on Monday gives out roses on TV.\n2. If a show gives out roses on TV, then the show is an episode of The Bachelor.\n3. The Bachelor portrays the lives of real people.\n4. All shows portraying the lives of real people are reality TV shows.\n5. Breaking Bad is a show.\n6. Breaking Bad is not a reality TV show.\nPremises-FOL:\n1. ∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))\n2. ∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))\n3. ∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))\n4. ∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))\n5. Show(breakingBad)\n6. ¬RealityTVShow(breakingBad)\nConclusion:\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nConclusion-FOL:\n∀x ∀y ((Rose(y) ∧ GivenOutOn(y, tv) ∧ On(tv, x) ∧ From(y, breakingBad)) → MondayAt8PM(x))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Heinrich Schmidt was a German politician. \n2. Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nPremises-FOL:\n1. German(heinrichSchmidt) ∧ Politician(heinrichSchmidt)\n2. Member(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)\nConclusion:\nHeinrich Schmidt was German or Russian or both.\nConclusion-FOL:\nGerman(heinrichSchmidt) ∨ Russian(heinrichSchmidt)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Heinrich Schmidt was a German politician. \n2. Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nPremises-FOL:\n1. German(heinrichSchmidt) ∧ Politician(heinrichSchmidt)\n2. Member(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)\nConclusion:\nSome German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nConclusion-FOL:\n∃x (German(x) ∧ Politician(x) ∧ Member(x, prussianStateParliament) ∧ Member(x, naziReichstag))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Heinrich Schmidt was a German politician. \n2. Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nPremises-FOL:\n1. German(heinrichSchmidt) ∧ Politician(heinrichSchmidt)\n2. Member(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)\nConclusion:\nNo politicians are part of the Nazi Reichstag.\nConclusion-FOL:\n∀x (Politician(x) → ¬Member(x, naziReichstag))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If something is a deadly disease, then it comes with a low survival rate. \n2. Severe cancers are deadly diseases.\n3. Bile duct cancer is a severe form cancer. \n4. All Cholangiocarcinoma is bile duct cancer.\n5. Mild flu comes with a low survival rate.\n6. Colorectal cancer is not both a bile duct cancer and with a low survival rate.\nPremises-FOL:\n1. ∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))\n2. ∀x (SevereCancer(x) → DeadlyDiseases(x))\n3. ∀x (BileDuctCancer(x) → SevereCancer(x))\n4. ∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))\n5. ∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate)) \n6. ¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))\nConclusion:\nColorectal cancer is a kind of severe cancer\nConclusion-FOL:\nSevereCancer(colorectalCancer)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If something is a deadly disease, then it comes with a low survival rate. \n2. Severe cancers are deadly diseases.\n3. Bile duct cancer is a severe form cancer. \n4. All Cholangiocarcinoma is bile duct cancer.\n5. Mild flu comes with a low survival rate.\n6. Colorectal cancer is not both a bile duct cancer and with a low survival rate.\nPremises-FOL:\n1. ∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))\n2. ∀x (SevereCancer(x) → DeadlyDiseases(x))\n3. ∀x (BileDuctCancer(x) → SevereCancer(x))\n4. ∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))\n5. ∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate)) \n6. ¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))\nConclusion:\nIf colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.\nConclusion-FOL:\n¬(BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)) ∨ (BileDuctCancer(colorectalCancer) ∧ MildFlu(colorectalCancer))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. If something is a deadly disease, then it comes with a low survival rate. \n2. Severe cancers are deadly diseases.\n3. Bile duct cancer is a severe form cancer. \n4. All Cholangiocarcinoma is bile duct cancer.\n5. Mild flu comes with a low survival rate.\n6. Colorectal cancer is not both a bile duct cancer and with a low survival rate.\nPremises-FOL:\n1. ∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))\n2. ∀x (SevereCancer(x) → DeadlyDiseases(x))\n3. ∀x (BileDuctCancer(x) → SevereCancer(x))\n4. ∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))\n5. ∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate)) \n6. ¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))\nConclusion:\nColorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.\nConclusion-FOL:\nCholangiocarcinoma(colorectalCancer) ∧ (MildFlu(colorectalCancer) ∨ BileDuctCancer(colorectalCancer))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All people who eat salads regularly are very conscious about their health and eating habits.\n2. All people who grew up in health-conscious childhood homes eat salads regularly.\n3. All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\n4. All people who disregard their physical well-being are not very conscious about their health and eating habits.\n5. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n6. Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\nPremises-FOL:\n1. ∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatinggHabit))\n2. ∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))\n3. ∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))\n4. ∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))\n5. ∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))\n6. ¬(GrowUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))\nConclusion:\nTaylor eats salads regularly.\nConclusion-FOL:\nRegularlyEat(taylor, salad)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All people who eat salads regularly are very conscious about their health and eating habits.\n2. All people who grew up in health-conscious childhood homes eat salads regularly.\n3. All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\n4. All people who disregard their physical well-being are not very conscious about their health and eating habits.\n5. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n6. Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\nPremises-FOL:\n1. ∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatinggHabit))\n2. ∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))\n3. ∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))\n4. ∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))\n5. ∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))\n6. ¬(GrowUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))\nConclusion:\nTaylor visits the gym at least once a day.\nConclusion-FOL:\nVisitDaily(taylor, gym)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All people who eat salads regularly are very conscious about their health and eating habits.\n2. All people who grew up in health-conscious childhood homes eat salads regularly.\n3. All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\n4. All people who disregard their physical well-being are not very conscious about their health and eating habits.\n5. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n6. Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\nPremises-FOL:\n1. ∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatinggHabit))\n2. ∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))\n3. ∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))\n4. ∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))\n5. ∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))\n6. ¬(GrowUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))\nConclusion:\nTaylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\nConclusion-FOL:\n¬GrowUpIn(taylor, health-consciousChildhoodHome) ∧ ¬VisitDaily(taylor, gym))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. The summer Olympic games is a sporting event. \n2. The last summer Olympic games was in Tokyo.\n3. The United States won the most medals in Tokyo. \nPremises-FOL:\n1. SportingEvent(olympics)\n2. LastSummerOlympics(tokyo)\n3. MostMedals(unitedStates, tokyo)\nConclusion:\nThe world championships is a sporting event.\nConclusion-FOL:\nSportingEvent(champs)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. The summer Olympic games is a sporting event. \n2. The last summer Olympic games was in Tokyo.\n3. The United States won the most medals in Tokyo. \nPremises-FOL:\n1. SportingEvent(olympics)\n2. LastSummerOlympics(tokyo)\n3. MostMedals(unitedStates, tokyo)\nConclusion:\nThe last summer Olympic games were not in Tokyo.\nConclusion-FOL:\n¬LastSummerOlympics(tokyo)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. The summer Olympic games is a sporting event. \n2. The last summer Olympic games was in Tokyo.\n3. The United States won the most medals in Tokyo. \nPremises-FOL:\n1. SportingEvent(olympics)\n2. LastSummerOlympics(tokyo)\n3. MostMedals(unitedStates, tokyo)\nConclusion:\nThe United States won the most medals in the last summer Olympic games.\nConclusion-FOL:\n∃x (LastSummerOlympics(x) ∧ MostMedals(unitedStates, x))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. All horses have hooves.\n2. No humans have hooves.\nPremises-FOL:\n1. ∀x (Horse(x) → ∃y ∃z (¬(y=z) ∧ Hoof(y) ∧ Hoof(z) ∧ Have(x, y) ∧ Have(x, z)))\n2. ∀x (Human(x) → ¬(∃y ∃z (¬(y=z) ∧ Hoof(y) ∧ Hoof(z) ∧ Have(x, y) ∧ Have(x, z))))\nConclusion:\nSome humans are horses.\nConclusion-FOL:\n∃x (Human(x) ∧ Human(y) ∧ Horse(x) ∧ Horse(y) ∧ ¬(x=y))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Susan flies to LGA airport.\n2. The departure and arrival can not be at the same airport.\n3. John flies from LGA airport.\nPremises-FOL:\n1. FlyTo(susan, lgaAirport)\n2. ∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))\n3. FlyFrom(john, lgaAirport)\nConclusion:\nSusan flies from LGA airport.\nConclusion-FOL:\nFlyFrom(susan, lgaAirport)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Susan flies to LGA airport.\n2. The departure and arrival can not be at the same airport.\n3. John flies from LGA airport.\nPremises-FOL:\n1. FlyTo(susan, lgaAirport)\n2. ∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))\n3. FlyFrom(john, lgaAirport)\nConclusion:\nJohn flies to LGA airport.\nConclusion-FOL:\nFlyTo(john, lgaAirport)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No one nice to animals is also mean to animals.\n2. Some grumpy people are mean to animals.\n3. All animal lovers are nice to animals.\n4. All pet owners love animals.\n5. Tom is a pet owner.\nPremises-FOL:\n1. ∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))\n2. ∃x (Grumpy(x) ∧ MeanTo(x, animal))\n3. ∀x (AnimalLover(x) → NiceTo(x, animal))\n4. ∀x (PetOwner(x) → AnimalLover(x))\n5. PetOwner(tom)\nConclusion:\nTom is a grumpy person.\nConclusion-FOL:\nGrumpy(tom)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No one nice to animals is also mean to animals.\n2. Some grumpy people are mean to animals.\n3. All animal lovers are nice to animals.\n4. All pet owners love animals.\n5. Tom is a pet owner.\nPremises-FOL:\n1. ∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))\n2. ∃x (Grumpy(x) ∧ MeanTo(x, animal))\n3. ∀x (AnimalLover(x) → NiceTo(x, animal))\n4. ∀x (PetOwner(x) → AnimalLover(x))\n5. PetOwner(tom)\nConclusion:\nTom is not both a grumpy person and mean to animals.\nConclusion-FOL:\n¬(Grumpy(tom) ∧ MeanTo(tom, animal))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. No one nice to animals is also mean to animals.\n2. Some grumpy people are mean to animals.\n3. All animal lovers are nice to animals.\n4. All pet owners love animals.\n5. Tom is a pet owner.\nPremises-FOL:\n1. ∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))\n2. ∃x (Grumpy(x) ∧ MeanTo(x, animal))\n3. ∀x (AnimalLover(x) → NiceTo(x, animal))\n4. ∀x (PetOwner(x) → AnimalLover(x))\n5. PetOwner(tom)\nConclusion:\nIf Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.\nConclusion-FOL:\n¬(Grumpy(tom) ∧ MeanTo(tom, animal)) → ¬Grumpy(tom) ∧ ¬AnimalLover(tom))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. A podcast is not a novel.\n2. If a person is born in American City, the person is American.\n3. If a book is a novel and it is written by a person, then the person is a novel writer.\n4. Dani Shapiro is an American writer.\n5. Family History is written by Dani Shapiro.\n6. Family History is a novel written in 2003.\n7. Dani Shapiro created a podcast called Family Secrets.\n8. Boston is an American city.\nPremises-FOL:\n1. ∀x (Podcast(x) → ¬Novel(x))\n2. ∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y,america)) → American(x))\n3. ∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))\n4. American(dani_Shapiro) ∧ Writer(dani_Shapiro)\n5. WrittenBy(family_History, dani_Shapiro)\n6. Novel(family_History) ∧ WrittenIn(family_History, yr2003)\n7. Podcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)\n8. City(boston) ∧ American(boston)\nConclusion:\nDani Shapiro is a novel writer.\nConclusion-FOL:\nWritesNovel(dani_Shapiro)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. A podcast is not a novel.\n2. If a person is born in American City, the person is American.\n3. If a book is a novel and it is written by a person, then the person is a novel writer.\n4. Dani Shapiro is an American writer.\n5. Family History is written by Dani Shapiro.\n6. Family History is a novel written in 2003.\n7. Dani Shapiro created a podcast called Family Secrets.\n8. Boston is an American city.\nPremises-FOL:\n1. ∀x (Podcast(x) → ¬Novel(x))\n2. ∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y,america)) → American(x))\n3. ∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))\n4. American(dani_Shapiro) ∧ Writer(dani_Shapiro)\n5. WrittenBy(family_History, dani_Shapiro)\n6. Novel(family_History) ∧ WrittenIn(family_History, yr2003)\n7. Podcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)\n8. City(boston) ∧ American(boston)\nConclusion:\nFamily Secrets is a novel.\nConclusion-FOL:\nIsNovel(family_Secrets)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. A podcast is not a novel.\n2. If a person is born in American City, the person is American.\n3. If a book is a novel and it is written by a person, then the person is a novel writer.\n4. Dani Shapiro is an American writer.\n5. Family History is written by Dani Shapiro.\n6. Family History is a novel written in 2003.\n7. Dani Shapiro created a podcast called Family Secrets.\n8. Boston is an American city.\nPremises-FOL:\n1. ∀x (Podcast(x) → ¬Novel(x))\n2. ∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y,america)) → American(x))\n3. ∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))\n4. American(dani_Shapiro) ∧ Writer(dani_Shapiro)\n5. WrittenBy(family_History, dani_Shapiro)\n6. Novel(family_History) ∧ WrittenIn(family_History, yr2003)\n7. Podcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)\n8. City(boston) ∧ American(boston)\nConclusion:\nDani Shapiro was born in Boston.\nConclusion-FOL:\nBornIn(dani_Shapiro, boston)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some professional basketball players are not American nationals.\n2. All professional basketball players can do jump shots.\n3. If someone can jump shots, they leap straight into the air.\n4. If someone leaps straight into the air, they activate their leg muscles. \n5. Yuri does not activate his leg muscles.\nPremises-FOL:\n1. ∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n2. ∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n3. ∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n4. ∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n5. ¬Activate(yuri, legMuscle)\nConclusion:\nYuri is an American national.\nConclusion-FOL:\nAmericanNational(yuri)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some professional basketball players are not American nationals.\n2. All professional basketball players can do jump shots.\n3. If someone can jump shots, they leap straight into the air.\n4. If someone leaps straight into the air, they activate their leg muscles. \n5. Yuri does not activate his leg muscles.\nPremises-FOL:\n1. ∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n2. ∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n3. ∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n4. ∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n5. ¬Activate(yuri, legMuscle)\nConclusion:\nYuri is not an American professional basketball player.\nConclusion-FOL:\n¬(AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri))",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some professional basketball players are not American nationals.\n2. All professional basketball players can do jump shots.\n3. If someone can jump shots, they leap straight into the air.\n4. If someone leaps straight into the air, they activate their leg muscles. \n5. Yuri does not activate his leg muscles.\nPremises-FOL:\n1. ∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n2. ∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n3. ∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n4. ∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n5. ¬Activate(yuri, legMuscle)\nConclusion:\nYuri is an American professional basketball player.\nConclusion-FOL:\nAmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some professional basketball players are not American nationals.\n2. All professional basketball players can do jump shots.\n3. If someone can jump shots, they leap straight into the air.\n4. If someone leaps straight into the air, they activate their leg muscles. \n5. Yuri does not activate his leg muscles.\nPremises-FOL:\n1. ∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n2. ∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n3. ∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n4. ∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n5. ¬Activate(yuri, legMuscle)\nConclusion:\nIf Yuri does not leap straight into the air, then Yuri is an American professional basketball player.\nConclusion-FOL:\n¬LeapStraightIntoAir(yuri) → (AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Some professional basketball players are not American nationals.\n2. All professional basketball players can do jump shots.\n3. If someone can jump shots, they leap straight into the air.\n4. If someone leaps straight into the air, they activate their leg muscles. \n5. Yuri does not activate his leg muscles.\nPremises-FOL:\n1. ∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n2. ∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n3. ∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n4. ∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n5. ¬Activate(yuri, legMuscle)\nConclusion:\nIf Yuri is not an American professional basketball player, then Yuri is a professional basketball player.\nConclusion-FOL:\n¬(AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri)) → (Professional(yuri) ∧ BasketballPlayer(yuri))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Events are either happy or sad.\n2. At least one event is happy. \nPremises-FOL:\n1. ∀x (Event(x) → Happy(x) ⊕ Sad(x))\n2. ∃x (Event(x) ∧ Happy(x)) \nConclusion:\nAll events are sad.\nConclusion-FOL:\n∀x (Event(x) → Sad(x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. The winner of the 1992 du Maurier Classic was Steinhauer.\n2. Steinhauer participated in the 1992 du Maurier Classic.\n3. One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\n4. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n5. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nPremises-FOL:\n1. WinnerOf(steinhauer, duMaurierClassic, year1992)\n2. Participate(duMaurierClassic, steinhauer, year1992)\n3. ∃x ∃y (OnLeaderBoardOf(x, duMaurierClassic) ∧ SixWayTie(x)) ∧ In(y, sixWayTie) ∧ Belgium(y))\n4. From(descampe, belgium) ∧ OnLeaderBoardOf(descampe, duMaurierClassic)\n5. ∀x (LeaderBoard(maurier, x) → Participate(maurier, x))\nConclusion:\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nConclusion-FOL:\n¬WinnerOf(steinhauer, duMaurierClassic, year1992)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. The winner of the 1992 du Maurier Classic was Steinhauer.\n2. Steinhauer participated in the 1992 du Maurier Classic.\n3. One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\n4. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n5. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nPremises-FOL:\n1. WinnerOf(steinhauer, duMaurierClassic, year1992)\n2. Participate(duMaurierClassic, steinhauer, year1992)\n3. ∃x ∃y (OnLeaderBoardOf(x, duMaurierClassic) ∧ SixWayTie(x)) ∧ In(y, sixWayTie) ∧ Belgium(y))\n4. From(descampe, belgium) ∧ OnLeaderBoardOf(descampe, duMaurierClassic)\n5. ∀x (LeaderBoard(maurier, x) → Participate(maurier, x))\nConclusion:\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nConclusion-FOL:\nSixWayTie(descampe)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Jane does not like any animals that bark.\n2. All dogs are animals that bark.\n3. Jane likes all animals that jump.\n4. If an animal has legs, then it jumps.\n5. If an animal is terricolous, then it has legs. \n6. KiKi is an animal.\n7. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nPremises-FOL:\n1. ∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))\n2. ∀x (Dog(x) → Animal(x) ∧ Bark(x))\n3. ∀x (Animal(x) ∧ Jump(x) → Like(jane, x))\n4. ∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))\n5. ∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))\n6. Animal(kiki)\n7. ¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))\nConclusion:\nKiKi is terricolous.\nConclusion-FOL:\nTerricolous(kiki)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Jane does not like any animals that bark.\n2. All dogs are animals that bark.\n3. Jane likes all animals that jump.\n4. If an animal has legs, then it jumps.\n5. If an animal is terricolous, then it has legs. \n6. KiKi is an animal.\n7. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nPremises-FOL:\n1. ∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))\n2. ∀x (Dog(x) → Animal(x) ∧ Bark(x))\n3. ∀x (Animal(x) ∧ Jump(x) → Like(jane, x))\n4. ∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))\n5. ∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))\n6. Animal(kiki)\n7. ¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))\nConclusion:\nKiKi is a barking dog.\nConclusion-FOL:\nBark(kiki) ∧ Dog(kiki)",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Jane does not like any animals that bark.\n2. All dogs are animals that bark.\n3. Jane likes all animals that jump.\n4. If an animal has legs, then it jumps.\n5. If an animal is terricolous, then it has legs. \n6. KiKi is an animal.\n7. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nPremises-FOL:\n1. ∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))\n2. ∀x (Dog(x) → Animal(x) ∧ Bark(x))\n3. ∀x (Animal(x) ∧ Jump(x) → Like(jane, x))\n4. ∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))\n5. ∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))\n6. Animal(kiki)\n7. ¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))\nConclusion:\nKiKi does not bark and he is not a dog.\nConclusion-FOL:\n¬Bark(kiki) ∧ ¬Dog(kiki)",
        "input": "",
        "output": "True"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Ailton Silva, born in 1995, is commonly known as Ailton.\n2. Ailton is a football player who was loaned out to Braga.\n3. Ailton Silva is a Brazilian footballer who plays for Náutico.\n4. Náutico is a football club along with Braga.\n5. Fluminense is a football club.\nPremises-FOL:\n1. BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\n2. FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\n3. Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\n4. FootballClub(nautico) ∧ FootballClub(braga)\n5. FootballClub(fluminense)\nConclusion:\nNo one playing for Nautico is Brazilian.\nConclusion-FOL:\n∀x (PlayFor(x, nautico) → ¬Brazilian(x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Ailton Silva, born in 1995, is commonly known as Ailton.\n2. Ailton is a football player who was loaned out to Braga.\n3. Ailton Silva is a Brazilian footballer who plays for Náutico.\n4. Náutico is a football club along with Braga.\n5. Fluminense is a football club.\nPremises-FOL:\n1. BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\n2. FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\n3. Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\n4. FootballClub(nautico) ∧ FootballClub(braga)\n5. FootballClub(fluminense)\nConclusion:\nAilton Silva does not play for a football club.\nConclusion-FOL:\n∀x (FootballClub(x) → ¬PlayFor(ailtonSilva, x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Ailton Silva, born in 1995, is commonly known as Ailton.\n2. Ailton is a football player who was loaned out to Braga.\n3. Ailton Silva is a Brazilian footballer who plays for Náutico.\n4. Náutico is a football club along with Braga.\n5. Fluminense is a football club.\nPremises-FOL:\n1. BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\n2. FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\n3. Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\n4. FootballClub(nautico) ∧ FootballClub(braga)\n5. FootballClub(fluminense)\nConclusion:\nAilton was not loaned out to a football club.\nConclusion-FOL:\n∀x (FootballClub(x) → ¬LoanedTo(ailton, x))",
        "input": "",
        "output": "False"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Ailton Silva, born in 1995, is commonly known as Ailton.\n2. Ailton is a football player who was loaned out to Braga.\n3. Ailton Silva is a Brazilian footballer who plays for Náutico.\n4. Náutico is a football club along with Braga.\n5. Fluminense is a football club.\nPremises-FOL:\n1. BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\n2. FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\n3. Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\n4. FootballClub(nautico) ∧ FootballClub(braga)\n5. FootballClub(fluminense)\nConclusion:\nAilton Silva played for Fluminense.\nConclusion-FOL:\nPlayFor(ailtonSilva, fluminense)",
        "input": "",
        "output": "Unknown"
    },
    {
        "instruction": "Please solve the question step by step based on First-Order Logic rules such as Modus Ponens, determine whether the conclusion is true, false, or unknown based on these premises.\n\nPremises:\n1. Ailton Silva, born in 1995, is commonly known as Ailton.\n2. Ailton is a football player who was loaned out to Braga.\n3. Ailton Silva is a Brazilian footballer who plays for Náutico.\n4. Náutico is a football club along with Braga.\n5. Fluminense is a football club.\nPremises-FOL:\n1. BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\n2. FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\n3. Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\n4. FootballClub(nautico) ∧ FootballClub(braga)\n5. FootballClub(fluminense)\nConclusion:\nAilton Silva was loaned out to a football club.\nConclusion-FOL:\n∃x (FootballClub(x) ∧ LoanedTo(ailtonSilva, x))",
        "input": "",
        "output": "Unknown"
    }
]